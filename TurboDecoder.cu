// TurboDecoder : Defines the entry point for the console application.
#include "helper_cuda.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <time.h>
#include <limits.h>
#include <iostream>

#define IM1 2147483563
#define IM2 2147483399
#define AM (1.0/IM1)
#define IMM1 (IM1-1)
#define IA1 40014
#define IA2 40692
#define IQ1 53668
#define IQ2 52774
#define IR1 12211
#define IR2 3791
#define NTAB 32
#define NDIV (1+IMM1/NTAB)
#define EPS 1.7E-308 //MINDOUBLE
#define RNMX (1.0-EPS)
#define INIFINITY  1E+10
#define MIN 1E-300
using namespace std;

#define L_TOTAL 6144// if u want to use block interleave,L_TOTAL must = x^2
#define MAXITER 10
#define	FRAME_NUM 10
#define AlphaBetaBLOCK_NUM 8
#define AlphaBetaTHREAD_NUM 8

#define THREAD_NUM 8
#define BLOCK_NUM 64 
#define L_BLOCK L_TOTAL/BLOCK_NUM

#define LEAVER_BLOCK 8
#define LEAVER_THREAD 768

typedef unsigned char BYTE;
typedef int INT;
typedef unsigned int UINT;
typedef int BOOL;

//UINT m_Inter_table[L_TOTAL] ; 
//Lte 6144 bits interleave table
UINT m_Inter_table[L_TOTAL] = 
    {0,743,2446,5109,2588,1027,426,785,2104,4383,
1478,5677,4692,4667,5602,1353,4208,1879,510,101,
652,2163,4634,1921,168,5519,5686,669,2756,5803,
3666,2489,2272,3015,4718,1237,4860,3299,2698,3057,
4376,511,3750,1805,820,795,1730,3625,336,4151,
2782,2373,2924,4435,762,4193,2440,1647,1814,2941,
5028,1931,5938,4761,4544,5287,846,3509,988,5571,
4970,5329,504,2783,6022,4077,3092,3067,4002,5897,
2608,279,5054,4645,5196,563,3034,321,4712,3919,
4086,5213,1156,4203,2066,889,672,1415,3118,5781,
3260,1699,1098,1457,2776,5055,2150,205,5364,5339,
130,2025,4880,2551,1182,773,1324,2835,5306,2593,
840,47,214,1341,3428,331,4338,3161,2944,3687,
5390,1909,5532,3971,3370,3729,5048,1183,4422,2477,
1492,1467,2402,4297,1008,4823,3454,3045,3596,5107,
1434,4865,3112,2319,2486,3613,5700,2603,466,5433,
5216,5959,1518,4181,1660,99,5642,6001,1176,3455,
550,4749,3764,3739,4674,425,3280,951,5726,5317,
5868,1235,3706,993,5384,4591,4758,5885,1828,4875,
2738,1561,1344,2087,3790,309,3932,2371,1770,2129,
3448,5727,2822,877,6036,6011,802,2697,5552,3223,
1854,1445,1996,3507,5978,3265,1512,719,886,2013,
4100,1003,5010,3833,3616,4359,6062,2581,60,4643,
4042,4401,5720,1855,5094,3149,2164,2139,3074,4969,
1680,5495,4126,3717,4268,5779,2106,5537,3784,2991,
3158,4285,228,3275,1138,6105,5888,487,2190,4853,
2332,771,170,529,1848,4127,1222,5421,4436,4411,
5346,1097,3952,1623,254,5989,396,1907,4378,1665,
6056,5263,5430,413,2500,5547,3410,2233,2016,2759,
4462,981,4604,3043,2442,2801,4120,255,3494,1549,
564,539,1474,3369,80,3895,2526,2117,2668,4179,
506,3937,2184,1391,1558,2685,4772,1675,5682,4505,
4288,5031,590,3253,732,5315,4714,5073,248,2527,
5766,3821,2836,2811,3746,5641,2352,23,4798,4389,
4940,307,2778,65,4456,3663,3830,4957,900,3947,
1810,633,416,1159,2862,5525,3004,1443,842,1201,
2520,4799,1894,6093,5108,5083,6018,1769,4624,2295,
926,517,1068,2579,5050,2337,584,5935,6102,1085,
3172,75,4082,2905,2688,3431,5134,1653,5276,3715,
3114,3473,4792,927,4166,2221,1236,1211,2146,4041,
752,4567,3198,2789,3340,4851,1178,4609,2856,2063,
2230,3357,5444,2347,210,5177,4960,5703,1262,3925,
1404,5987,5386,5745,920,3199,294,4493,3508,3483,
4418,169,3024,695,5470,5061,5612,979,3450,737,
5128,4335,4502,5629,1572,4619,2482,1305,1088,1831,
3534,53,3676,2115,1514,1873,3192,5471,2566,621,
5780,5755,546,2441,5296,2967,1598,1189,1740,3251,
5722,3009,1256,463,630,1757,3844,747,4754,3577,
3360,4103,5806,2325,5948,4387,3786,4145,5464,1599,
4838,2893,1908,1883,2818,4713,1424,5239,3870,3461,
4012,5523,1850,5281,3528,2735,2902,4029,6116,3019,
882,5849,5632,231,1934,4597,2076,515,6058,273,
1592,3871,966,5165,4180,4155,5090,841,3696,1367,
6142,5733,140,1651,4122,1409,5800,5007,5174,157,
2244,5291,3154,1977,1760,2503,4206,725,4348,2787,
2186,2545,3864,6143,3238,1293,308,283,1218,3113,
5968,3639,2270,1861,2412,3923,250,3681,1928,1135,
1302,2429,4516,1419,5426,4249,4032,4775,334,2997,
476,5059,4458,4817,6136,2271,5510,3565,2580,2555,
3490,5385,2096,5911,4542,4133,4684,51,2522,5953,
4200,3407,3574,4701,644,3691,1554,377,160,903,
2606,5269,2748,1187,586,945,2264,4543,1638,5837,
4852,4827,5762,1513,4368,2039,670,261,812,2323,
4794,2081,328,5679,5846,829,2916,5963,3826,2649,
2432,3175,4878,1397,5020,3459,2858,3217,4536,671,
3910,1965,980,955,1890,3785,496,4311,2942,2533,
3084,4595,922,4353,2600,1807,1974,3101,5188,2091,
6098,4921,4704,5447,1006,3669,1148,5731,5130,5489,
664,2943,38,4237,3252,3227,4162,6057,2768,439,
5214,4805,5356,723,3194,481,4872,4079,4246,5373,
1316,4363,2226,1049,832,1575,3278,5941,3420,1859,
1258,1617,2936,5215,2310,365,5524,5499,290,2185,
5040,2711,1342,933,1484,2995,5466,2753,1000,207,
374,1501,3588,491,4498,3321,3104,3847,5550,2069,
5692,4131,3530,3889,5208,1343,4582,2637,1652,1627,
2562,4457,1168,4983,3614,3205,3756,5267,1594,5025,
3272,2479,2646,3773,5860,2763,626,5593,5376,6119,
1678,4341,1820,259,5802,17,1336,3615,710,4909,
3924,3899,4834,585,3440,1111,5886,5477,6028,1395,
3866,1153,5544,4751,4918,6045,1988,5035,2898,1721,
1504,2247,3950,469,4092,2531,1930,2289,3608,5887,
2982,1037,52,27,962,2857,5712,3383,2014,1605,
2156,3667,6138,3425,1672,879,1046,2173,4260,1163,
5170,3993,3776,4519,78,2741,220,4803,4202,4561,
5880,2015,5254,3309,2324,2299,3234,5129,1840,5655,
4286,3877,4428,5939,2266,5697,3944,3151,3318,4445,
388,3435,1298,121,6048,647,2350,5013,2492,931,
330,689,2008,4287,1382,5581,4596,4571,5506,1257,
4112,1783,414,5,556,2067,4538,1825,72,5423,
5590,573,2660,5707,3570,2393,2176,2919,4622,1141,
4764,3203,2602,2961,4280,415,3654,1709,724,699,
1634,3529,240,4055,2686,2277,2828,4339,666,4097,
2344,1551,1718,2845,4932,1835,5842,4665,4448,5191,
750,3413,892,5475,4874,5233,408,2687,5926,3981,
2996,2971,3906,5801,2512,183,4958,4549,5100,467,
2938,225,4616,3823,3990,5117,1060,4107,1970,793,
576,1319,3022,5685,3164,1603,1002,1361,2680,4959,
2054,109,5268,5243,34,1929,4784,2455,1086,677,
1228,2739,5210,2497,744,6095,118,1245,3332,235,
4242,3065,2848,3591,5294,1813,5436,3875,3274,3633,
4952,1087,4326,2381,1396,1371,2306,4201,912,4727,
3358,2949,3500,5011,1338,4769,3016,2223,2390,3517,
5604,2507,370,5337,5120,5863,1422,4085,1564,3,
5546,5905,1080,3359,454,4653,3668,3643,4578,329,
3184,855,5630,5221,5772,1139,3610,897,5288,4495,
4662,5789,1732,4779,2642,1465,1248,1991,3694,213,
3836,2275,1674,2033,3352,5631,2726,781,5940,5915,
706,2601,5456,3127,1758,1349,1900,3411,5882,3169,
1416,623,790,1917,4004,907,4914,3737,3520,4263,
5966,2485,6108,4547,3946,4305,5624,1759,4998,3053,
2068,2043,2978,4873,1584,5399,4030,3621,4172,5683,
2010,5441,3688,2895,3062,4189,132,3179,1042,6009,
5792,391,2094,4757,2236,675,74,433,1752,4031,
1126,5325,4340,4315,5250,1001,3856,1527,158,5893,
300,1811,4282,1569,5960,5167,5334,317,2404,5451,
3314,2137,1920,2663,4366,885,4508,2947,2346,2705,
4024,159,3398,1453,468,443,1378,3273,6128,3799,
2430,2021,2572,4083,410,3841,2088,1295,1462,2589,
4676,1579,5586,4409,4192,4935,494,3157,636,5219,
4618,4977,152,2431,5670,3725,2740,2715,3650,5545,
2256,6071,4702,4293,4844,211,2682,6113,4360,3567,
3734,4861,804,3851,1714,537,320,1063,2766,5429,
2908,1347,746,1105,2424,4703,1798,5997,5012,4987,
5922,1673,4528,2199,830,421,972,2483,4954,2241,
488,5839,6006,989,3076,6123,3986,2809,2592,3335,
5038,1557,5180,3619,3018,3377,4696,831,4070,2125,
1140,1115,2050,3945,656,4471,3102,2693,3244,4755,
1082,4513,2760,1967,2134,3261,5348,2251,114,5081,
4864,5607,1166,3829,1308,5891,5290,5649,824,3103,
198,4397,3412,3387,4322,73,2928,599,5374,4965,
5516,883,3354,641,5032,4239,4406,5533,1476,4523,
2386,1209,992,1735,3438,6101,3580,2019,1418,1777,
3096,5375,2470,525,5684,5659,450,2345,5200,2871,
1502,1093,1644,3155,5626,2913,1160,367,534,1661,
3748,651,4658,3481,3264,4007,5710,2229,5852,4291,
3690,4049,5368,1503,4742,2797,1812,1787,2722,4617,
1328,5143,3774,3365,3916,5427,1754,5185,3432,2639,
2806,3933,6020,2923,786,5753,5536,135,1838,4501,
1980,419,5962,177,1496,3775,870,5069,4084,4059,
4994,745,3600,1271,6046,5637,44,1555,4026,1313,
5704,4911,5078,61,2148,5195,3058,1881,1664,2407,
4110,629,4252,2691,2090,2449,3768,6047,3142,1197,
212,187,1122,3017,5872,3543,2174,1765,2316,3827,
154,3585,1832,1039,1206,2333,4420,1323,5330,4153,
3936,4679,238,2901,380,4963,4362,4721,6040,2175,
5414,3469,2484,2459,3394,5289,2000,5815,4446,4037,
4588,6099,2426,5857,4104,3311,3478,4605,548,3595,
1458,281,64,807,2510,5173,2652,1091,490,849,
2168,4447,1542,5741,4756,4731,5666,1417,4272,1943,
574,165,716,2227,4698,1985,232,5583,5750,733,
2820,5867,3730,2553,2336,3079,4782,1301,4924,3363,
2762,3121,4440,575,3814,1869,884,859,1794,3689,
400,4215,2846,2437,2988,4499,826,4257,2504,1711,
1878,3005,5092,1995,6002,4825,4608,5351,910,3573,
1052,5635,5034,5393,568,2847,6086,4141,3156,3131,
4066,5961,2672,343,5118,4709,5260,627,3098,385,
4776,3983,4150,5277,1220,4267,2130,953,736,1479,
3182,5845,3324,1763,1162,1521,2840,5119,2214,269,
5428,5403,194,2089,4944,2615,1246,837,1388,2899,
5370,2657,904,111,278,1405,3492,395,4402,3225,
3008,3751,5454,1973,5596,4035,3434,3793,5112,1247,
4486,2541,1556,1531,2466,4361,1072,4887,3518,3109,
3660,5171,1498,4929,3176,2383,2550,3677,5764,2667,
530,5497,5280,6023,1582,4245,1724,163,5706,6065,
1240,3519,614,4813,3828,3803,4738,489,3344,1015,
5790,5381,5932,1299,3770,1057,5448,4655,4822,5949,
1892,4939,2802,1625,1408,2151,3854,373,3996,2435,
1834,2193,3512,5791,2886,941,6100,6075,866,2761,
5616,3287,1918,1509,2060,3571,6042,3329,1576,783,
950,2077,4164,1067,5074,3897,3680,4423,6126,2645,
124,4707,4106,4465,5784,1919,5158,3213,2228,2203,
3138,5033,1744,5559,4190,3781,4332,5843,2170,5601,
3848,3055,3222,4349,292,3339,1202,25,5952,551,
2254,4917,2396,835,234,593,1912,4191,1286,5485,
4500,4475,5410,1161,4016,1687,318,6053,460,1971,
4442,1729,6120,5327,5494,477,2564,5611,3474,2297,
2080,2823,4526,1045,4668,3107,2506,2865,4184,319,
3558,1613,628,603,1538,3433,144,3959,2590,2181,
2732,4243,570,4001,2248,1455,1622,2749,4836,1739,
5746,4569,4352,5095,654,3317,796,5379,4778,5137,
312,2591,5830,3885,2900,2875,3810,5705,2416,87,
4862,4453,5004,371,2842,129,4520,3727,3894,5021,
964,4011,1874,697,480,1223,2926,5589,3068,1507,
906,1265,2584,4863,1958,13,5172,5147,6082,1833,
4688,2359,990,581,1132,2643,5114,2401,648,5999,
22,1149,3236,139,4146,2969,2752,3495,5198,1717,
5340,3779,3178,3537,4856,991,4230,2285,1300,1275,
2210,4105,816,4631,3262,2853,3404,4915,1242,4673,
2920,2127,2294,3421,5508,2411,274,5241,5024,5767,
1326,3989,1468,6051,5450,5809,984,3263,358,4557,
3572,3547,4482,233,3088,759,5534,5125,5676,1043,
3514,801,5192,4399,4566,5693,1636,4683,2546,1369,
1152,1895,3598,117,3740,2179,1578,1937,3256,5535,
2630,685,5844,5819,610,2505,5360,3031,1662,1253,
1804,3315,5786,3073,1320,527,694,1821,3908,811,
4818,3641,3424,4167,5870,2389,6012,4451,3850,4209,
5528,1663,4902,2957,1972,1947,2882,4777,1488,5303,
3934,3525,4076,5587,1914,5345,3592,2799,2966,4093,
36,3083,946,5913,5696,295,1998,4661,2140,579,
6122,337,1656,3935,1030,5229,4244,4219,5154,905,
3760,1431,62,5797,204,1715,4186,1473,5864,5071,
5238,221,2308,5355,3218,2041,1824,2567,4270,789,
4412,2851,2250,2609,3928,63,3302,1357,372,347,
1282,3177,6032,3703,2334,1925,2476,3987,314,3745,
1992,1199,1366,2493,4580,1483,5490,4313,4096,4839,
398,3061,540,5123,4522,4881,56,2335,5574,3629,
2644,2619,3554,5449,2160,5975,4606,4197,4748,115,
2586,6017,4264,3471,3638,4765,708,3755,1618,441,
224,967,2670,5333,2812,1251,650,1009,2328,4607,
1702,5901,4916,4891,5826,1577,4432,2103,734,325,
876,2387,4858,2145,392,5743,5910,893,2980,6027,
3890,2713,2496,3239,4942,1461,5084,3523,2922,3281,
4600,735,3974,2029,1044,1019,1954,3849,560,4375,
3006,2597,3148,4659,986,4417,2664,1871,2038,3165,
5252,2155,18,4985,4768,5511,1070,3733,1212,5795,
5194,5553,728,3007,102,4301,3316,3291,4226,6121,
2832,503,5278,4869,5420,787,3258,545,4936,4143,
4310,5437,1380,4427,2290,1113,896,1639,3342,6005,
3484,1923,1322,1681,3000,5279,2374,429,5588,5563,
354,2249,5104,2775,1406,997,1548,3059,5530,2817,
1064,271,438,1565,3652,555,4562,3385,3168,3911,
5614,2133,5756,4195,3594,3953,5272,1407,4646,2701,
1716,1691,2626,4521,1232,5047,3678,3269,3820,5331,
1658,5089,3336,2543,2710,3837,5924,2827,690,5657,
5440,39,1742,4405,1884,323,5866,81,1400,3679,
774,4973,3988,3963,4898,649,3504,1175,5950,5541,
6092,1459,3930,1217,5608,4815,4982,6109,2052,5099,
2962,1785,1568,2311,4014,533,4156,2595,1994,2353,
3672,5951,3046,1101,116,91,1026,2921,5776,3447,
2078,1669,2220,3731,58,3489,1736,943,1110,2237,
4324,1227,5234,4057,3840,4583,142,2805,284,4867,
4266,4625,5944,2079,5318,3373,2388,2363,3298,5193,
1904,5719,4350,3941,4492,6003,2330,5761,4008,3215,
3382,4509,452,3499,1362,185,6112,711,2414,5077,
2556,995,394,753,2072,4351,1446,5645,4660,4635,
5570,1321,4176,1847,478,69,620,2131,4602,1889,
136,5487,5654,637,2724,5771,3634,2457,2240,2983,
4686,1205,4828,3267,2666,3025,4344,479,3718,1773,
788,763,1698,3593,304,4119,2750,2341,2892,4403,
730,4161,2408,1615,1782,2909,4996,1899,5906,4729,
4512,5255,814,3477,956,5539,4938,5297,472,2751,
5990,4045,3060,3035,3970,5865,2576,247,5022,4613,
5164,531,3002,289,4680,3887,4054,5181,1124,4171,
2034,857,640,1383,3086,5749,3228,1667,1066,1425,
2744,5023,2118,173,5332,5307,98,1993,4848,2519,
1150,741,1292,2803,5274,2561,808,15,182,1309,
3396,299,4306,3129,2912,3655,5358,1877,5500,3939,
3338,3697,5016,1151,4390,2445,1460,1435,2370,4265,
976,4791,3422,3013,3564,5075,1402,4833,3080,2287,
2454,3581,5668,2571,434,5401,5184,5927,1486,4149,
1628,67,5610,5969,1144,3423,518,4717,3732,3707,
4642,393,3248,919,5694,5285,5836,1203,3674,961,
5352,4559,4726,5853,1796,4843,2706,1529,1312,2055,
3758,277,3900,2339,1738,2097,3416,5695,2790,845,
6004,5979,770,2665,5520,3191,1822,1413,1964,3475,
5946,3233,1480,687,854,1981,4068,971,4978,3801,
3584,4327,6030,2549,28,4611,4010,4369,5688,1823,
5062,3117,2132,2107,3042,4937,1648,5463,4094,3685,
4236,5747,2074,5505,3752,2959,3126,4253,196,3243,
1106,6073,5856,455,2158,4821,2300,739,138,497,
1816,4095,1190,5389,4404,4379,5314,1065,3920,1591,
222,5957,364,1875,4346,1633,6024,5231,5398,381,
2468,5515,3378,2201,1984,2727,4430,949,4572,3011,
2410,2769,4088,223,3462,1517,532,507,1442,3337,
48,3863,2494,2085,2636,4147,474,3905,2152,1359,
1526,2653,4740,1643,5650,4473,4256,4999,558,3221,
700,5283,4682,5041,216,2495,5734,3789,2804,2779,
3714,5609,2320,6135,4766,4357,4908,275,2746,33,
4424,3631,3798,4925,868,3915,1778,601,384,1127,
2830,5493,2972,1411,810,1169,2488,4767,1862,6061,
5076,5051,5986,1737,4592,2263,894,485,1036,2547,
5018,2305,552,5903,6070,1053,3140,43,4050,2873,
2656,3399,5102,1621,5244,3683,3082,3441,4760,895,
4134,2189,1204,1179,2114,4009,720,4535,3166,2757,
3308,4819,1146,4577,2824,2031,2198,3325,5412,2315,
178,5145,4928,5671,1230,3893,1372,5955,5354,5713,
888,3167,262,4461,3476,3451,4386,137,2992,663,
5438,5029,5580,947,3418,705,5096,4303,4470,5597,
1540,4587,2450,1273,1056,1799,3502,21,3644,2083,
1482,1841,3160,5439,2534,589,5748,5723,514,2409,
5264,2935,1566,1157,1708,3219,5690,2977,1224,431,
598,1725,3812,715,4722,3545,3328,4071,5774,2293,
5916,4355,3754,4113,5432,1567,4806,2861,1876,1851,
2786,4681,1392,5207,3838,3429,3980,5491,1818,5249,
3496,2703,2870,3997,6084,2987,850,5817,5600,199,
1902,4565,2044,483,6026,241,1560,3839,934,5133,
4148,4123,5058,809,3664,1335,6110,5701,108,1619,
4090,1377,5768,4975,5142,125,2212,5259,3122,1945,
1728,2471,4174,693,4316,2755,2154,2513,3832,6111,
3206,1261,276,251,1186,3081,5936,3607,2238,1829,
2380,3891,218,3649,1896,1103,1270,2397,4484,1387,
5394,4217,4000,4743,302,2965,444,5027,4426,4785,
6104,2239,5478,3533,2548,2523,3458,5353,2064,5879,
4510,4101,4652,19,2490,5921,4168,3375,3542,4669,
612,3659,1522,345,128,871,2574,5237,2716,1155,
554,913,2232,4511,1606,5805,4820,4795,5730,1481,
4336,2007,638,229,780,2291,4762,2049,296,5647,
5814,797,2884,5931,3794,2617,2400,3143,4846,1365,
4988,3427,2826,3185,4504,639,3878,1933,948,923,
1858,3753,464,4279,2910,2501,3052,4563,890,4321,
2568,1775,1942,3069,5156,2059,6066,4889,4672,5415,
974,3637,1116,5699,5098,5457,632,2911,6,4205,
3220,3195,4130,6025,2736,407,5182,4773,5324,691,
3162,449,4840,4047,4214,5341,1284,4331,2194,1017,
800,1543,3246,5909,3388,1827,1226,1585,2904,5183,
2278,333,5492,5467,258,2153,5008,2679,1310,901,
1452,2963,5434,2721,968,175,342,1469,3556,459,
4466,3289,3072,3815,5518,2037,5660,4099,3498,3857,
5176,1311,4550,2605,1620,1595,2530,4425,1136,4951,
3582,3173,3724,5235,1562,4993,3240,2447,2614,3741,
5828,2731,594,5561,5344,6087,1646,4309,1788,227,
5770,6129,1304,3583,678,4877,3892,3867,4802,553,
3408,1079,5854,5445,5996,1363,3834,1121,5512,4719,
4886,6013,1956,5003,2866,1689,1472,2215,3918,437,
4060,2499,1898,2257,3576,5855,2950,1005,20,6139,
930,2825,5680,3351,1982,1573,2124,3635,6106,3393,
1640,847,1014,2141,4228,1131,5138,3961,3744,4487,
46,2709,188,4771,4170,4529,5848,1983,5222,3277,
2292,2267,3202,5097,1808,5623,4254,3845,4396,5907,
2234,5665,3912,3119,3286,4413,356,3403,1266,89,
6016,615,2318,4981,2460,899,298,657,1976,4255,
1350,5549,4564,4539,5474,1225,4080,1751,382,6117,
524,2035,4506,1793,40,5391,5558,541,2628,5675,
3538,2361,2144,2887,4590,1109,4732,3171,2570,2929,
4248,383,3622,1677,692,667,1602,3497,208,4023,
2654,2245,2796,4307,634,4065,2312,1519,1686,2813,
4900,1803,5810,4633,4416,5159,718,3381,860,5443,
4842,5201,376,2655,5894,3949,2964,2939,3874,5769,
2480,151,4926,4517,5068,435,2906,193,4584,3791,
3958,5085,1028,4075,1938,761,544,1287,2990,5653,
3132,1571,970,1329,2648,4927,2022,77,5236,5211,
2,1897,4752,2423,1054,645,1196,2707,5178,2465,
712,6063,86,1213,3300,203,4210,3033,2816,3559,
5262,1781,5404,3843,3242,3601,4920,1055,4294,2349,
1364,1339,2274,4169,880,4695,3326,2917,3468,4979,
1306,4737,2984,2191,2358,3485,5572,2475,338,5305,
5088,5831,1390,4053,1532,6115,5514,5873,1048,3327,
422,4621,3636,3611,4546,297,3152,823,5598,5189,
5740,1107,3578,865,5256,4463,4630,5757,1700,4747,
2610,1433,1216,1959,3662,181,3804,2243,1642,2001,
3320,5599,2694,749,5908,5883,674,2569,5424,3095,
1726,1317,1868,3379,5850,3137,1384,591,758,1885,
3972,875,4882,3705,3488,4231,5934,2453,6076,4515,
3914,4273,5592,1727,4966,3021,2036,2011,2946,4841,
1552,5367,3998,3589,4140,5651,1978,5409,3656,2863,
3030,4157,100,3147,1010,5977,5760,359,2062,4725,
2204,643,42,401,1720,3999,1094,5293,4308,4283,
5218,969,3824,1495,126,5861,268,1779,4250,1537,
5928,5135,5302,285,2372,5419,3282,2105,1888,2631,
4334,853,4476,2915,2314,2673,3992,127,3366,1421,
436,411,1346,3241,6096,3767,2398,1989,2540,4051,
378,3809,2056,1263,1430,2557,4644,1547,5554,4377,
4160,4903,462,3125,604,5187,4586,4945,120,2399,
5638,3693,2708,2683,3618,5513,2224,6039,4670,4261,
4812,179,2650,6081,4328,3535,3702,4829,772,3819,
1682,505,288,1031,2734,5397,2876,1315,714,1073,
2392,4671,1766,5965,4980,4955,5890,1641,4496,2167,
798,389,940,2451,4922,2209,456,5807,5974,957,
3044,6091,3954,2777,2560,3303,5006,1525,5148,3587,
2986,3345,4664,799,4038,2093,1108,1083,2018,3913,
624,4439,3070,2661,3212,4723,1050,4481,2728,1935,
2102,3229,5316,2219,82,5049,4832,5575,1134,3797,
1276,5859,5258,5617,792,3071,166,4365,3380,3355,
4290,41,2896,567,5342,4933,5484,851,3322,609,
5000,4207,4374,5501,1444,4491,2354,1177,960,1703,
3406,6069,3548,1987,1386,1745,3064,5343,2438,493,
5652,5627,418,2313,5168,2839,1470,1061,1612,3123,
5594,2881,1128,335,502,1629,3716,619,4626,3449,
3232,3975,5678,2197,5820,4259,3658,4017,5336,1471,
4710,2765,1780,1755,2690,4585,1296,5111,3742,3333,
3884,5395,1722,5153,3400,2607,2774,3901,5988,2891,
754,5721,5504,103,1806,4469,1948,387,5930,145,
1464,3743,838,5037,4052,4027,4962,713,3568,1239,
6014,5605,12,1523,3994,1281,5672,4879,5046,29,
2116,5163,3026,1849,1632,2375,4078,597,4220,2659,
2058,2417,3736,6015,3110,1165,180,155,1090,2985,
5840,3511,2142,1733,2284,3795,122,3553,1800,1007,
1174,2301,4388,1291,5298,4121,3904,4647,206,2869,
348,4931,4330,4689,6008,2143,5382,3437,2452,2427,
3362,5257,1968,5783,4414,4005,4556,6067,2394,5825,
4072,3279,3446,4573,516,3563,1426,249,32,775,
2478,5141,2620,1059,458,817,2136,4415,1510,5709,
4724,4699,5634,1385,4240,1911,542,133,684,2195,
4666,1953,200,5551,5718,701,2788,5835,3698,2521,
2304,3047,4750,1269,4892,3331,2730,3089,4408,543,
3782,1837,852,827,1762,3657,368,4183,2814,2405,
2956,4467,794,4225,2472,1679,1846,2973,5060,1963,
5970,4793,4576,5319,878,3541,1020,5603,5002,5361,
536,2815,6054,4109,3124,3099,4034,5929,2640,311,
5086,4677,5228,595,3066,353,4744,3951,4118,5245,
1188,4235,2098,921,704,1447,3150,5813,3292,1731,
1130,1489,2808,5087,2182,237,5396,5371,162,2057,
4912,2583,1214,805,1356,2867,5338,2625,872,79,
246,1373,3460,363,4370,3193,2976,3719,5422,1941,
5564,4003,3402,3761,5080,1215,4454,2509,1524,1499,
2434,4329,1040,4855,3486,3077,3628,5139,1466,4897,
3144,2351,2518,3645,5732,2635,498,5465,5248,5991,
1550,4213,1692,131,5674,6033,1208,3487,582,4781,
3796,3771,4706,457,3312,983,5758,5349,5900,1267,
3738,1025,5416,4623,4790,5917,1860,4907,2770,1593,
1376,2119,3822,341,3964,2403,1802,2161,3480,5759,
2854,909,6068,6043,834,2729,5584,3255,1886,1477,
2028,3539,6010,3297,1544,751,918,2045,4132,1035,
5042,3865,3648,4391,6094,2613,92,4675,4074,4433,
5752,1887,5126,3181,2196,2171,3106,5001,1712,5527,
4158,3749,4300,5811,2138,5569,3816,3023,3190,4317,
260,3307,1170,6137,5920,519,2222,4885,2364,803,
202,561,1880,4159,1254,5453,4468,4443,5378,1129,
3984,1655,286,6021,428,1939,4410,1697,6088,5295,
5462,445,2532,5579,3442,2265,2048,2791,4494,1013,
4636,3075,2474,2833,4152,287,3526,1581,596,571,
1506,3401,112,3927,2558,2149,2700,4211,538,3969,
2216,1423,1590,2717,4804,1707,5714,4537,4320,5063,
622,3285,764,5347,4746,5105,280,2559,5798,3853,
2868,2843,3778,5673,2384,55,4830,4421,4972,339,
2810,97,4488,3695,3862,4989,932,3979,1842,665,
448,1191,2894,5557,3036,1475,874,1233,2552,4831,
1926,6125,5140,5115,6050,1801,4656,2327,958,549,
1100,2611,5082,2369,616,5967,6134,1117,3204,107,
4114,2937,2720,3463,5166,1685,5308,3747,3146,3505,
4824,959,4198,2253,1268,1243,2178,4073,784,4599,
3230,2821,3372,4883,1210,4641,2888,2095,2262,3389,
5476,2379,242,5209,4992,5735,1294,3957,1436,6019,
5418,5777,952,3231,326,4525,3540,3515,4450,201,
3056,727,5502,5093,5644,1011,3482,769,5160,4367,
4534,5661,1604,4651,2514,1337,1120,1863,3566,85,
3708,2147,1546,1905,3224,5503,2598,653,5812,5787,
578,2473,5328,2999,1630,1221,1772,3283,5754,3041,
1288,495,662,1789,3876,779,4786,3609,3392,4135,
5838,2357,5980,4419,3818,4177,5496,1631,4870,2925,
1940,1915,2850,4745,1456,5271,3902,3493,4044,5555,
1882,5313,3560,2767,2934,4061,4,3051,914,5881,
5664,263,1966,4629,2108,547,6090,305,1624,3903,
998,5197,4212,4187,5122,873,3728,1399,30,5765,
172,1683,4154,1441,5832,5039,5206,189,2276,5323,
3186,2009,1792,2535,4238,757,4380,2819,2218,2577,
3896,31,3270,1325,340,315,1250,3145,6000,3671,
2302,1893,2444,3955,282,3713,1960,1167,1334,2461,
4548,1451,5458,4281,4064,4807,366,3029,508,5091,
4490,4849,24,2303,5542,3597,2612,2587,3522,5417,
2128,5943,4574,4165,4716,83,2554,5985,4232,3439,
3606,4733,676,3723,1586,409,192,935,2638,5301,
2780,1219,618,977,2296,4575,1670,5869,4884,4859,
5794,1545,4400,2071,702,293,844,2355,4826,2113,
360,5711,5878,861,2948,5995,3858,2681,2464,3207,
4910,1429,5052,3491,2890,3249,4568,703,3942,1997,
1012,987,1922,3817,528,4343,2974,2565,3116,4627,
954,4385,2632,1839,2006,3133,5220,2123,6130,4953,
4736,5479,1038,3701,1180,5763,5162,5521,696,2975,
70,4269,3284,3259,4194,6089,2800,471,5246,4837,
5388,755,3226,513,4904,4111,4278,5405,1348,4395,
2258,1081,864,1607,3310,5973,3452,1891,1290,1649,
2968,5247,2342,397,5556,5531,322,2217,5072,2743,
1374,965,1516,3027,5498,2785,1032,239,406,1533,
3620,523,4530,3353,3136,3879,5582,2101,5724,4163,
3562,3921,5240,1375,4614,2669,1684,1659,2594,4489,
1200,5015,3646,3237,3788,5299,1626,5057,3304,2511,
2678,3805,5892,2795,658,5625,5408,7,1710,4373,
1852,291,5834,49,1368,3647,742,4941,3956,3931,
4866,617,3472,1143,5918,5509,6060,1427,3898,1185,
5576,4783,4950,6077,2020,5067,2930,1753,1536,2279,
3982,501,4124,2563,1962,2321,3640,5919,3014,1069,
84,59,994,2889,5744,3415,2046,1637,2188,3699,
26,3457,1704,911,1078,2205,4292,1195,5202,4025,
3808,4551,110,2773,252,4835,4234,4593,5912,2047,
5286,3341,2356,2331,3266,5161,1872,5687,4318,3909,
4460,5971,2298,5729,3976,3183,3350,4477,420,3467,
1330,153,6080,679,2382,5045,2524,963,362,721,
2040,4319,1414,5613,4628,4603,5538,1289,4144,1815,
446,37,588,2099,4570,1857,104,5455,5622,605,
2692,5739,3602,2425,2208,2951,4654,1173,4796,3235,
2634,2993,4312,447,3686,1741,756,731,1666,3561,
272,4087,2718,2309,2860,4371,698,4129,2376,1583,
1750,2877,4964,1867,5874,4697,4480,5223,782,3445,
924,5507,4906,5265,440,2719,5958,4013,3028,3003,
3938,5833,2544,215,4990,4581,5132,499,2970,257,
4648,3855,4022,5149,1092,4139,2002,825,608,1351,
3054,5717,3196,1635,1034,1393,2712,4991,2086,141,
5300,5275,66,1961,4816,2487,1118,709,1260,2771,
5242,2529,776,6127,150,1277,3364,267,4274,3097,
2880,3623,5326,1845,5468,3907,3306,3665,4984,1119,
4358,2413,1428,1403,2338,4233,944,4759,3390,2981,
3532,5043,1370,4801,3048,2255,2422,3549,5636,2539,
402,5369,5152,5895,1454,4117,1596,35,5578,5937,
1112,3391,486,4685,3700,3675,4610,361,3216,887,
5662,5253,5804,1171,3642,929,5320,4527,4694,5821,
1764,4811,2674,1497,1280,2023,3726,245,3868,2307,
1706,2065,3384,5663,2758,813,5972,5947,738,2633,
5488,3159,1790,1381,1932,3443,5914,3201,1448,655,
822,1949,4036,939,4946,3769,3552,4295,5998,2517,
6140,4579,3978,4337,5656,1791,5030,3085,2100,2075,
3010,4905,1616,5431,4062,3653,4204,5715,2042,5473,
3720,2927,3094,4221,164,3211,1074,6041,5824,423,
2126,4789,2268,707,106,465,1784,4063,1158,5357,
4372,4347,5282,1033,3888,1559,190,5925,332,1843,
4314,1601,5992,5199,5366,349,2436,5483,3346,2169,
1952,2695,4398,917,4540,2979,2378,2737,4056,191,
3430,1485,500,475,1410,3305,16,3831,2462,2053,
2604,4115,442,3873,2120,1327,1494,2621,4708,1611,
5618,4441,4224,4967,526,3189,668,5251,4650,5009,
184,2463,5702,3757,2772,2747,3682,5577,2288,6103,
4734,4325,4876,243,2714,1,4392,3599,3766,4893,
836,3883,1746,569,352,1095,2798,5461,2940,1379,
778,1137,2456,4735,1830,6029,5044,5019,5954,1705,
4560,2231,862,453,1004,2515,4986,2273,520,5871,
6038,1021,3108,11,4018,2841,2624,3367,5070,1589,
5212,3651,3050,3409,4728,863,4102,2157,1172,1147,
2082,3977,688,4503,3134,2725,3276,4787,1114,4545,
2792,1999,2166,3293,5380,2283,146,5113,4896,5639,
1198,3861,1340,5923,5322,5681,856,3135,230,4429,
3444,3419,4354,105,2960,631,5406,4997,5548,915,
3386,673,5064,4271,4438,5565,1508,4555,2418,1241,
1024,1767,3470,6133,3612,2051,1450,1809,3128,5407,
2502,557,5716,5691,482,2377,5232,2903,1534,1125,
1676,3187,5658,2945,1192,399,566,1693,3780,683,
4690,3513,3296,4039,5742,2261,5884,4323,3722,4081,
5400,1535,4774,2829,1844,1819,2754,4649,1360,5175,
3806,3397,3948,5459,1786,5217,3464,2671,2838,3965,
6052,2955,818,5785,5568,167,1870,4533,2012,451,
5994,209,1528,3807,902,5101,4116,4091,5026,777,
3632,1303,6078,5669,76,1587,4058,1345,5736,4943,
5110,93,2180,5227,3090,1913,1696,2439,4142,661,
4284,2723,2122,2481,3800,6079,3174,1229,244,219,
1154,3049,5904,3575,2206,1797,2348,3859,186,3617,
1864,1071,1238,2365,4452,1355,5362,4185,3968,4711,
270,2933,412,4995,4394,4753,6072,2207,5446,3501,
2516,2491,3426,5321,2032,5847,4478,4069,4620,6131,
2458,5889,4136,3343,3510,4637,580,3627,1490,313,
96,839,2542,5205,2684,1123,522,881,2200,4479,
1574,5773,4788,4763,5698,1449,4304,1975,606,197,
748,2259,4730,2017,264,5615,5782,765,2852,5899,
3762,2585,2368,3111,4814,1333,4956,3395,2794,3153,
4472,607,3846,1901,916,891,1826,3721,432,4247,
2878,2469,3020,4531,858,4289,2536,1743,1910,3037,
5124,2027,6034,4857,4640,5383,942,3605,1084,5667,
5066,5425,600,2879,6118,4173,3188,3163,4098,5993,
2704,375,5150,4741,5292,659,3130,417,4808,4015,
4182,5309,1252,4299,2162,985,768,1511,3214,5877,
3356,1795,1194,1553,2872,5151,2246,301,5460,5435,
226,2121,4976,2647,1278,869,1420,2931,5402,2689,
936,143,310,1437,3524,427,4434,3257,3040,3783,
5486,2005,5628,4067,3466,3825,5144,1279,4518,2573,
1588,1563,2498,4393,1104,4919,3550,3141,3692,5203,
1530,4961,3208,2415,2582,3709,5796,2699,562,5529,
5312,6055,1614,4277,1756,195,5738,6097,1272,3551,
646,4845,3860,3835,4770,521,3376,1047,5822,5413,
5964,1331,3802,1089,5480,4687,4854,5981,1924,4971,
2834,1657,1440,2183,3886,405,4028,2467,1866,2225,
3544,5823,2918,973,6132,6107,898,2793,5648,3319,
1950,1541,2092,3603,6074,3361,1608,815,982,2109,
4196,1099,5106,3929,3712,4455,14,2677,156,4739,
4138,4497,5816,1951,5190,3245,2260,2235,3170,5065,
1776,5591,4222,3813,4364,5875,2202,5633,3880,3087,
3254,4381,324,3371,1234,57,5984,583,2286,4949,
2428,867,266,625,1944,4223,1318,5517,4532,4507,
5442,1193,4048,1719,350,6085,492,2003,4474,1761,
8,5359,5526,509,2596,5643,3506,2329,2112,2855,
4558,1077,4700,3139,2538,2897,4216,351,3590,1645,
660,635,1570,3465,176,3991,2622,2213,2764,4275,
602,4033,2280,1487,1654,2781,4868,1771,5778,4601,
4384,5127,686,3349,828,5411,4810,5169,344,2623,
5862,3917,2932,2907,3842,5737,2448,119,4894,4485,
5036,403,2874,161,4552,3759,3926,5053,996,4043,
1906,729,512,1255,2958,5621,3100,1539,938,1297,
2616,4895,1990,45,5204,5179,6114,1865,4720,2391,
1022,613,1164,2675,5146,2433,680,6031,54,1181,
3268,171,4178,3001,2784,3527,5230,1749,5372,3811,
3210,3569,4888,1023,4262,2317,1332,1307,2242,4137,
848,4663,3294,2885,3436,4947,1274,4705,2952,2159,
2326,3453,5540,2443,306,5273,5056,5799,1358,4021,
1500,6083,5482,5841,1016,3295,390,4589,3604,3579,
4514,265,3120,791,5566,5157,5708,1075,3546,833,
5224,4431,4598,5725,1668,4715,2578,1401,1184,1927,
3630,149,3772,2211,1610,1969,3288,5567,2662,717,
5876,5851,642,2537,5392,3063,1694,1285,1836,3347,
5818,3105,1352,559,726,1853,3940,843,4850,3673,
3456,4199,5902,2421,6044,4483,3882,4241,5560,1695,
4934,2989,2004,1979,2914,4809,1520,5335,3966,3557,
4108,5619,1946,5377,3624,2831,2998,4125,68,3115,
978,5945,5728,327,2030,4693,2172,611,10,369,
1688,3967,1062,5261,4276,4251,5186,937,3792,1463,
94,5829,236,1747,4218,1505,5896,5103,5270,253,
2340,5387,3250,2073,1856,2599,4302,821,4444,2883,
2282,2641,3960,95,3334,1389,404,379,1314,3209,
6064,3735,2366,1957,2508,4019,346,3777,2024,1231,
1398,2525,4612,1515,5522,4345,4128,4871,430,3093,
572,5155,4554,4913,88,2367,5606,3661,2676,2651,
3586,5481,2192,6007,4638,4229,4780,147,2618,6049,
4296,3503,3670,4797,740,3787,1650,473,256,999,
2702,5365,2844,1283,682,1041,2360,4639,1734,5933,
4948,4923,5858,1609,4464,2135,766,357,908,2419,
4890,2177,424,5775,5942,925,3012,6059,3922,2745,
2528,3271,4974,1493,5116,3555,2954,3313,4632,767,
4006,2061,1076,1051,1986,3881,592,4407,3038,2629,
3180,4691,1018,4449,2696,1903,2070,3197,5284,2187,
50,5017,4800,5543,1102,3765,1244,5827,5226,5585,
760,3039,134,4333,3348,3323,4258,9,2864,535,
5310,4901,5452,819,3290,577,4968,4175,4342,5469,
1412,4459,2322,1145,928,1671,3374,6037,3516,1955,
1354,1713,3032,5311,2406,461,5620,5595,386,2281,
5136,2807,1438,1029,1580,3091,5562,2849,1096,303,
470,1597,3684,587,4594,3417,3200,3943,5646,2165,
5788,4227,3626,3985,5304,1439,4678,2733,1748,1723,
2658,4553,1264,5079,3710,3301,3852,5363,1690,5121,
3368,2575,2742,3869,5956,2859,722,5689,5472,71,
1774,4437,1916,355,5898,113,1432,3711,806,5005,
4020,3995,4930,681,3536,1207,5982,5573,6124,1491,
3962,1249,5640,4847,5014,6141,2084,5131,2994,1817,
1600,2343,4046,565,4188,2627,2026,2385,3704,5983,
3078,1133,148,123,1058,2953,5808,3479,2110,1701,
2252,3763,90,3521,1768,975,1142,2269,4356,1259,
5266,4089,3872,4615,174,2837,316,4899,4298,4657,
5976,2111,5350,3405,2420,2395,3330,5225,1936,5751,
4382,3973,4524,6035,2362,5793,4040,3247,3414,4541,
484,3531,1394,217};


long idum2;
long idum;
long iy;
long iv[NTAB];	
unsigned memory;
/*
Long period (? 2 \Theta 10 18 ) random number generator of L'Ecuyer with Bays­Durham shuffle
and added safeguards. Returns a uniform random deviate between 0.0 and 1.0 (exclusive of
the endpoint values). Call with idum a negative integer to initialize; thereafter, do not alter
idum between successive deviates in a sequence. RNMX should approximate the largest floating
value that is less than 1.
--
*/

float ran2()
{
	int j;
	long k;
	float temp;
	
	k=(idum)/IQ1;
	idum=IA1*(idum-k*IQ1)-k*IR1;  // Compute idum=(IA1*idum) % IM1 without overflows by Schrage's method.
	if (idum < 0)
		idum += IM1;
	k=idum2/IQ2;
	idum2=IA2*(idum2-k*IQ2)-k*IR2;	// Compute idum2=(IA2*idum) % IM2 likewise.
	if (idum2 < 0)
		idum2 += IM2;
	j = iy/NDIV;
	iy=iv[j]-idum2;
	//	iy=iv[j]-idum2; 		// Here idum is shuffled, idum and idum2 are combined to generate output.
	iv[j] = idum;
	if (iy < 1)
		iy += IMM1;
	if ((temp=AM*iy) > RNMX)
		return RNMX; 		// Because users don't expect endpoint values.
	else
		return temp;
}


void initRandom(long seed)
{
	idum2=123456789;
	idum=0;
	iy=0;
	
	if (seed != 0)
		idum = seed;
	else
		idum = 1;
	
	
    int j;
	for (j=NTAB+7;j>=0;j--) // Load the shuffle table (after 8 warm­ups).
	{
		long k=(idum)/IQ1;
		
		idum=IA1*(idum-k*IQ1)-k*IR1;
		if (idum < 0)
			idum += IM1;
		if (j < NTAB)
			iv[j] = idum;
	}
	iy=iv[0];
}


float floatrandom()
{
	float t = ran2();
	return t;
}

long longrandom(long range)
{
	float t;
	
	t = floatrandom();
	return((long)(t*(float)range));
}


bool boolrandom()
{
	float t=floatrandom();
	
	if (t>0.5)
		return true;
	else
		return false;
}
long seed = 1234421;

#define M	3	// register length,=tail length
#define NSTATE	8	// = M^2
#define L_ALL 3*L_TOTAL	// coded frame length
// Rate 1/3 Turbo code
// The generator polynomials used are:
//	g0=[1 1 1]
//  g1=[1 0 1]
//	RSC encoder structure:
//
//			 +------------------------------------------>c1
//           |          g0(x)    
//           x_.--o-------------(+)<----------+
//           |    |             /|\           |
//			 |   \|/      ---    |     ---    |
// data --_.-o-->(+)--o->| D0|---o--->| D1|---o
//                    |   ---          ---    |
//                    |                       |
//                    +-------->(+)<----------+
//                      g1(x)    |
//								 +---------------------->c2
//

// NextOut[bk][current state]
static const char EnNextOut[2][NSTATE] = // check bit based on current and input bit
{	0,0,1,1,1,1,0,0,
	1,1,0,0,0,0,1,1
};
//static const char NextOut[2][NSTATE] = // check bit based on current and input bit
//{	-1,-1,1,1,1,1,-1,-1,
//	1,1,-1,-1,-1,-1,1,1
//};
// NextState[bk][current state]
static const BYTE NextState[2][NSTATE] = // next state based on current and input bit
{	0,4,5,1,2,6,7,3,
	4,0,1,5,6,2,3,7
};
// LastOut[bk][current state]
//static const char LastOut[2][NSTATE] =	// trellis last check bit
//{	-1,1,1,-1,-1,1,1,-1,
//	1,-1,-1,1,1,-1,-1,1
//};
// LastState[bk][current state]
//static const BYTE LastState[2][NSTATE] =	// last state lead to current state by input bk
//{	0,3,4,7,1,2,5,6,
//	1,2,5,6,0,3,4,7
//};
// TailBit[current state]
static const char TailBit[NSTATE] = // tail info bits when trellis is terminating
{	0,1,1,0,0,1,1,0
};

//Lte 4096 bits interleave table
/*UINT m_Inter_table[L_TOTAL] = 
{0,95,318,669,1148,1755,2490,3353,248,1367,
2614,3989,1396,3027,690,2577,496,2639,814,3213,
1644,203,2986,1801,744,3911,3110,2437,1892,1475,
1186,1025,992,1087,1310,1661,2140,2747,3482,249,
1240,2359,3606,885,2388,4019,1682,3569,1488,3631,
1806,109,2636,1195,3978,2793,1736,807,6,3429,
2884,2467,2178,2017,1984,2079,2302,2653,3132,3739,
378,1241,2232,3351,502,1877,3380,915,2674,465,
2480,527,2798,1101,3628,2187,874,3785,2728,1799,
998,325,3876,3459,3170,3009,2976,3071,3294,3645,
28,635,1370,2233,3224,247,1494,2869,276,1907,
3666,1457,3472,1519,3790,2093,524,3179,1866,681,
3720,2791,1990,1317,772,355,66,4001,3968,4063,
190,541,1020,1627,2362,3225,120,1239,2486,3861,
1268,2899,562,2449,368,2511,686,3085,1516,75,
2858,1673,616,3783,2982,2309,1764,1347,1058,897,
864,959,1182,1533,2012,2619,3354,121,1112,2231,
3478,757,2260,3891,1554,3441,1360,3503,1678,4077,
2508,1067,3850,2665,1608,679,3974,3301,2756,2339,
2050,1889,1856,1951,2174,2525,3004,3611,250,1113,
2104,3223,374,1749,3252,787,2546,337,2352,399,
2670,973,3500,2059,746,3657,2600,1671,870,197,
3748,3331,3042,2881,2848,2943,3166,3517,3996,507,
1242,2105,3096,119,1366,2741,148,1779,3538,1329,
3344,1391,3662,1965,396,3051,1738,553,3592,2663,
1862,1189,644,227,4034,3873,3840,3935,62,413,
892,1499,2234,3097,4088,1111,2358,3733,1140,2771,
434,2321,240,2383,558,2957,1388,4043,2730,1545,
488,3655,2854,2181,1636,1219,930,769,736,831,
1054,1405,1884,2491,3226,4089,984,2103,3350,629,
2132,3763,1426,3313,1232,3375,1550,3949,2380,939,
3722,2537,1480,551,3846,3173,2628,2211,1922,1761,
1728,1823,2046,2397,2876,3483,122,985,1976,3095,
246,1621,3124,659,2418,209,2224,271,2542,845,
3372,1931,618,3529,2472,1543,742,69,3620,3203,
2914,2753,2720,2815,3038,3389,3868,379,1114,1977,
2968,4087,1238,2613,20,1651,3410,1201,3216,1263,
3534,1837,268,2923,1610,425,3464,2535,1734,1061,
516,99,3906,3745,3712,3807,4030,285,764,1371,
2106,2969,3960,983,2230,3605,1012,2643,306,2193,
112,2255,430,2829,1260,3915,2602,1417,360,3527,
2726,2053,1508,1091,802,641,608,703,926,1277,
1756,2363,3098,3961,856,1975,3222,501,2004,3635,
1298,3185,1104,3247,1422,3821,2252,811,3594,2409,
1352,423,3718,3045,2500,2083,1794,1633,1600,1695,
1918,2269,2748,3355,4090,857,1848,2967,118,1493,
2996,531,2290,81,2096,143,2414,717,3244,1803,
490,3401,2344,1415,614,4037,3492,3075,2786,2625,
2592,2687,2910,3261,3740,251,986,1849,2840,3959,
1110,2485,3988,1523,3282,1073,3088,1135,3406,1709,
140,2795,1482,297,3336,2407,1606,933,388,4067,
3778,3617,3584,3679,3902,157,636,1243,1978,2841,
3832,855,2102,3477,884,2515,178,2065,4080,2127,
302,2701,1132,3787,2474,1289,232,3399,2598,1925,
1380,963,674,513,480,575,798,1149,1628,2235,
2970,3833,728,1847,3094,373,1876,3507,1170,3057,
976,3119,1294,3693,2124,683,3466,2281,1224,295,
3590,2917,2372,1955,1666,1505,1472,1567,1790,2141,
2620,3227,3962,729,1720,2839,4086,1365,2868,403,
2162,4049,1968,15,2286,589,3116,1675,362,3273,
2216,1287,486,3909,3364,2947,2658,2497,2464,2559,
2782,3133,3612,123,858,1721,2712,3831,982,2357,
3860,1395,3154,945,2960,1007,3278,1581,12,2667,
1354,169,3208,2279,1478,805,260,3939,3650,3489,
3456,3551,3774,29,508,1115,1850,2713,3704,727,
1974,3349,756,2387,50,1937,3952,1999,174,2573,
1004,3659,2346,1161,104,3271,2470,1797,1252,835,
546,385,352,447,670,1021,1500,2107,2842,3705,
600,1719,2966,245,1748,3379,1042,2929,848,2991,
1166,3565,1996,555,3338,2153,1096,167,3462,2789,
2244,1827,1538,1377,1344,1439,1662,2013,2492,3099,
3834,601,1592,2711,3958,1237,2740,275,2034,3921,
1840,3983,2158,461,2988,1547,234,3145,2088,1159,
358,3781,3236,2819,2530,2369,2336,2431,2654,3005,
3484,4091,730,1593,2584,3703,854,2229,3732,1267,
3026,817,2832,879,3150,1453,3980,2539,1226,41,
3080,2151,1350,677,132,3811,3522,3361,3328,3423,
3646,3997,380,987,1722,2585,3576,599,1846,3221,
628,2259,4018,1809,3824,1871,46,2445,876,3531,
2218,1033,4072,3143,2342,1669,1124,707,418,257,
224,319,542,893,1372,1979,2714,3577,472,1591,
2838,117,1620,3251,914,2801,720,2863,1038,3437,
1868,427,3210,2025,968,39,3334,2661,2116,1699,
1410,1249,1216,1311,1534,1885,2364,2971,3706,473,
1464,2583,3830,1109,2612,147,1906,3793,1712,3855,
2030,333,2860,1419,106,3017,1960,1031,230,3653,
3108,2691,2402,2241,2208,2303,2526,2877,3356,3963,
602,1465,2456,3575,726,2101,3604,1139,2898,689,
2704,751,3022,1325,3852,2411,1098,4009,2952,2023,
1222,549,4,3683,3394,3233,3200,3295,3518,3869,
252,859,1594,2457,3448,471,1718,3093,500,2131,
3890,1681,3696,1743,4014,2317,748,3403,2090,905,
3944,3015,2214,1541,996,579,290,129,96,191,
414,765,1244,1851,2586,3449,344,1463,2710,4085,
1492,3123,786,2673,592,2735,910,3309,1740,299,
3082,1897,840,4007,3206,2533,1988,1571,1282,1121,
1088,1183,1406,1757,2236,2843,3578,345,1336,2455,
3702,981,2484,19,1778,3665,1584,3727,1902,205,
2732,1291,4074,2889,1832,903,102,3525,2980,2563,
2274,2113,2080,2175,2398,2749,3228,3835,474,1337,
2328,3447,598,1973,3476,1011,2770,561,2576,623,
2894,1197,3724,2283,970,3881,2824,1895,1094,421,
3972,3555,3266,3105,3072,3167,3390,3741,124,731,
1466,2329,3320,343,1590,2965,372,2003,3762,1553,
3568,1615,3886,2189,620,3275,1962,777,3816,2887,
2086,1413,868,451,162,1,4064,63,286,637,
1116,1723,2458,3321,216,1335,2582,3957,1364,2995,
658,2545,464,2607,782,3181,1612,171,2954,1769,
712,3879,3078,2405,1860,1443,1154,993,960,1055,
1278,1629,2108,2715,3450,217,1208,2327,3574,853,
2356,3987,1650,3537,1456,3599,1774,77,2604,1163,
3946,2761,1704,775,4070,3397,2852,2435,2146,1985,
1952,2047,2270,2621,3100,3707,346,1209,2200,3319,
470,1845,3348,883,2642,433,2448,495,2766,1069,
3596,2155,842,3753,2696,1767,966,293,3844,3427,
3138,2977,2944,3039,3262,3613,4092,603,1338,2201,
3192,215,1462,2837,244,1875,3634,1425,3440,1487,
3758,2061,492,3147,1834,649,3688,2759,1958,1285,
740,323,34,3969,3936,4031,158,509,988,1595,
2330,3193,88,1207,2454,3829,1236,2867,530,2417,
336,2479,654,3053,1484,43,2826,1641,584,3751,
2950,2277,1732,1315,1026,865,832,927,1150,1501,
1980,2587,3322,89,1080,2199,3446,725,2228,3859,
1522,3409,1328,3471,1646,4045,2476,1035,3818,2633,
1576,647,3942,3269,2724,2307,2018,1857,1824,1919,
2142,2493,2972,3579,218,1081,2072,3191,342,1717,
3220,755,2514,305,2320,367,2638,941,3468,2027,
714,3625,2568,1639,838,165,3716,3299,3010,2849,
2816,2911,3134,3485,3964,475,1210,2073,3064,87,
1334,2709,116,1747,3506,1297,3312,1359,3630,1933,
364,3019,1706,521,3560,2631,1830,1157,612,195,
4002,3841,3808,3903,30,381,860,1467,2202,3065,
4056,1079,2326,3701,1108,2739,402,2289,208,2351,
526,2925,1356,4011,2698,1513,456,3623,2822,2149,
1604,1187,898,737,704,799,1022,1373,1852,2459,
3194,4057,952,2071,3318,597,2100,3731,1394,3281,
1200,3343,1518,3917,2348,907,3690,2505,1448,519,
3814,3141,2596,2179,1890,1729,1696,1791,2014,2365,
2844,3451,90,953,1944,3063,214,1589,3092,627,
2386,177,2192,239,2510,813,3340,1899,586,3497,
2440,1511,710,37,3588,3171,2882,2721,2688,2783,
3006,3357,3836,347,1082,1945,2936,4055,1206,2581,
4084,1619,3378,1169,3184,1231,3502,1805,236,2891,
1578,393,3432,2503,1702,1029,484,67,3874,3713,
3680,3775,3998,253,732,1339,2074,2937,3928,951,
2198,3573,980,2611,274,2161,80,2223,398,2797,
1228,3883,2570,1385,328,3495,2694,2021,1476,1059,
770,609,576,671,894,1245,1724,2331,3066,3929,
824,1943,3190,469,1972,3603,1266,3153,1072,3215,
1390,3789,2220,779,3562,2377,1320,391,3686,3013,
2468,2051,1762,1601,1568,1663,1886,2237,2716,3323,
4058,825,1816,2935,86,1461,2964,499,2258,49,
2064,111,2382,685,3212,1771,458,3369,2312,1383,
582,4005,3460,3043,2754,2593,2560,2655,2878,3229,
3708,219,954,1817,2808,3927,1078,2453,3956,1491,
3250,1041,3056,1103,3374,1677,108,2763,1450,265,
3304,2375,1574,901,356,4035,3746,3585,3552,3647,
3870,125,604,1211,1946,2809,3800,823,2070,3445,
852,2483,146,2033,4048,2095,270,2669,1100,3755,
2442,1257,200,3367,2566,1893,1348,931,642,481,
448,543,766,1117,1596,2203,2938,3801,696,1815,
3062,341,1844,3475,1138,3025,944,3087,1262,3661,
2092,651,3434,2249,1192,263,3558,2885,2340,1923,
1634,1473,1440,1535,1758,2109,2588,3195,3930,697,
1688,2807,4054,1333,2836,371,2130,4017,1936,4079,
2254,557,3084,1643,330,3241,2184,1255,454,3877,
3332,2915,2626,2465,2432,2527,2750,3101,3580,91,
826,1689,2680,3799,950,2325,3828,1363,3122,913,
2928,975,3246,1549,4076,2635,1322,137,3176,2247,
1446,773,228,3907,3618,3457,3424,3519,3742,4093,
476,1083,1818,2681,3672,695,1942,3317,724,2355,
18,1905,3920,1967,142,2541,972,3627,2314,1129,
72,3239,2438,1765,1220,803,514,353,320,415,
638,989,1468,2075,2810,3673,568,1687,2934,213,
1716,3347,1010,2897,816,2959,1134,3533,1964,523,
3306,2121,1064,135,3430,2757,2212,1795,1506,1345,
1312,1407,1630,1981,2460,3067,3802,569,1560,2679,
3926,1205,2708,243,2002,3889,1808,3951,2126,429,
2956,1515,202,3113,2056,1127,326,3749,3204,2787,
2498,2337,2304,2399,2622,2973,3452,4059,698,1561,
2552,3671,822,2197,3700,1235,2994,785,2800,847,
3118,1421,3948,2507,1194,9,3048,2119,1318,645,
100,3779,3490,3329,3296,3391,3614,3965,348,955,
1690,2553,3544,567,1814,3189,596,2227,3986,1777,
3792,1839,14,2413,844,3499,2186,1001,4040,3111,
2310,1637,1092,675,386,225,192,287,510,861,
1340,1947,2682,3545,440,1559,2806,85,1588,3219,
882,2769,688,2831,1006,3405,1836,395,3178,1993,
936,7,3302,2629,2084,1667,1378,1217,1184,1279,
1502,1853,2332,2939,3674,441,1432,2551,3798,1077,
2580,115,1874,3761,1680,3823,1998,301,2828,1387,
74,2985,1928,999,198,3621,3076,2659,2370,2209,
2176,2271,2494,2845,3324,3931,570,1433,2424,3543,
694,2069,3572,1107,2866,657,2672,719,2990,1293,
3820,2379,1066,3977,2920,1991,1190,517,4068,3651,
3362,3201,3168,3263,3486,3837,220,827,1562,2425,
3416,439,1686,3061,468,2099,3858,1649,3664,1711,
3982,2285,716,3371,2058,873,3912,2983,2182,1509,
964,547,258,97,64,159,382,733,1212,1819,
2554,3417,312,1431,2678,4053,1460,3091,754,2641,
560,2703,878,3277,1708,267,3050,1865,808,3975,
3174,2501,1956,1539,1250,1089,1056,1151,1374,1725,
2204,2811,3546,313,1304,2423,3670,949,2452,4083,
1746,3633,1552,3695,1870,173,2700,1259,4042,2857,
1800,871,70,3493,2948,2531,2242,2081,2048,2143,
2366,2717,3196,3803,442,1305,2296,3415,566,1941,
3444,979,2738,529,2544,591,2862,1165,3692,2251,
938,3849,2792,1863,1062,389,3940,3523,3234,3073,
3040,3135,3358,3709,92,699,1434,2297,3288,311,
1558,2933,340,1971,3730,1521,3536,1583,3854,2157,
588,3243,1930,745,3784,2855,2054,1381,836,419,
130,4065,4032,31,254,605,1084,1691,2426,3289,
184,1303,2550,3925,1332,2963,626,2513,432,2575,
750,3149,1580,139,2922,1737,680,3847,3046,2373,
1828,1411,1122,961,928,1023,1246,1597,2076,2683,
3418,185,1176,2295,3542,821,2324,3955,1618,3505,
1424,3567,1742,45,2572,1131,3914,2729,1672,743,
4038,3365,2820,2403,2114,1953,1920,2015,2238,2589,
3068,3675,314,1177,2168,3287,438,1813,3316,851,
2610,401,2416,463,2734,1037,3564,2123,810,3721,
2664,1735,934,261,3812,3395,3106,2945,2912,3007,
3230,3581,4060,571,1306,2169,3160,183,1430,2805,
212,1843,3602,1393,3408,1455,3726,2029,460,3115,
1802,617,3656,2727,1926,1253,708,291,2,3937,
3904,3999,126,477,956,1563,2298,3161,56,1175,
2422,3797,1204,2835,498,2385,304,2447,622,3021,
1452,11,2794,1609,552,3719,2918,2245,1700,1283,
994,833,800,895,1118,1469,1948,2555,3290,57,
1048,2167,3414,693,2196,3827,1490,3377,1296,3439,
1614,4013,2444,1003,3786,2601,1544,615,3910,3237,
2692,2275,1986,1825,1792,1887,2110,2461,2940,3547,
186,1049,2040,3159,310,1685,3188,723,2482,273,
2288,335,2606,909,3436,1995,682,3593,2536,1607,
806,133,3684,3267,2978,2817,2784,2879,3102,3453,
3932,443,1178,2041,3032,55,1302,2677,84,1715,
3474,1265,3280,1327,3598,1901,332,2987,1674,489,
3528,2599,1798,1125,580,163,3970,3809,3776,3871,
4094,349,828,1435,2170,3033,4024,1047,2294,3669,
1076,2707,370,2257,176,2319,494,2893,1324,3979,
2666,1481,424,3591,2790,2117,1572,1155,866,705,
672,767,990,1341,1820,2427,3162,4025,920,2039,
3286,565,2068,3699,1362,3249,1168,3311,1486,3885,
2316,875,3658,2473,1416,487,3782,3109,2564,2147,
1858,1697,1664,1759,1982,2333,2812,3419,58,921,
1912,3031,182,1557,3060,595,2354,145,2160,207,
2478,781,3308,1867,554,3465,2408,1479,678,5,
3556,3139,2850,2689,2656,2751,2974,3325,3804,315,
1050,1913,2904,4023,1174,2549,4052,1587,3346,1137,
3152,1199,3470,1773,204,2859,1546,361,3400,2471,
1670,997,452,35,3842,3681,3648,3743,3966,221,
700,1307,2042,2905,3896,919,2166,3541,948,2579,
242,2129,48,2191,366,2765,1196,3851,2538,1353,
296,3463,2662,1989,1444,1027,738,577,544,639,
862,1213,1692,2299,3034,3897,792,1911,3158,437,
1940,3571,1234,3121,1040,3183,1358,3757,2188,747,
3530,2345,1288,359,3654,2981,2436,2019,1730,1569,
1536,1631,1854,2205,2684,3291,4026,793,1784,2903,
54,1429,2932,467,2226,17,2032,79,2350,653,
3180,1739,426,3337,2280,1351,550,3973,3428,3011,
2722,2561,2528,2623,2846,3197,3676,187,922,1785,
2776,3895,1046,2421,3924,1459,3218,1009,3024,1071,
3342,1645,76,2731,1418,233,3272,2343,1542,869,
324,4003,3714,3553,3520,3615,3838,93,572,1179,
1914,2777,3768,791,2038,3413,820,2451,114,2001,
4016,2063,238,2637,1068,3723,2410,1225,168,3335,
2534,1861,1316,899,610,449,416,511,734,1085,
1564,2171,2906,3769,664,1783,3030,309,1812,3443,
1106,2993,912,3055,1230,3629,2060,619,3402,2217,
1160,231,3526,2853,2308,1891,1602,1441,1408,1503,
1726,2077,2556,3163,3898,665,1656,2775,4022,1301,
2804,339,2098,3985,1904,4047,2222,525,3052,1611,
298,3209,2152,1223,422,3845,3300,2883,2594,2433,
2400,2495,2718,3069,3548,59,794,1657,2648,3767,
918,2293,3796,1331,3090,881,2896,943,3214,1517,
4044,2603,1290,105,3144,2215,1414,741,196,3875,
3586,3425,3392,3487,3710,4061,444,1051,1786,2649,
3640,663,1910,3285,692,2323,4082,1873,3888,1935,
110,2509,940,3595,2282,1097,40,3207,2406,1733,
1188,771,482,321,288,383,606,957,1436,2043,
2778,3641,536,1655,2902,181,1684,3315,978,2865,
784,2927,1102,3501,1932,491,3274,2089,1032,103,
3398,2725,2180,1763,1474,1313,1280,1375,1598,1949,
2428,3035,3770,537,1528,2647,3894,1173,2676,211,
1970,3857,1776,3919,2094,397,2924,1483,170,3081,
2024,1095,294,3717,3172,2755,2466,2305,2272,2367,
2590,2941,3420,4027,666,1529,2520,3639,790,2165,
3668,1203,2962,753,2768,815,3086,1389,3916,2475,
1162,4073,3016,2087,1286,613,68,3747,3458,3297,
3264,3359,3582,3933,316,923,1658,2521,3512,535,
1782,3157,564,2195,3954,1745,3760,1807,4078,2381,
812,3467,2154,969,4008,3079,2278,1605,1060,643,
354,193,160,255,478,829,1308,1915,2650,3513,
408,1527,2774,53,1556,3187,850,2737,656,2799,
974,3373,1804,363,3146,1961,904,4071,3270,2597,
2052,1635,1346,1185,1152,1247,1470,1821,2300,2907,
3642,409,1400,2519,3766,1045,2548,83,1842,3729,
1648,3791,1966,269,2796,1355,42,2953,1896,967,
166,3589,3044,2627,2338,2177,2144,2239,2462,2813,
3292,3899,538,1401,2392,3511,662,2037,3540,1075,
2834,625,2640,687,2958,1261,3788,2347,1034,3945,
2888,1959,1158,485,4036,3619,3330,3169,3136,3231,
3454,3805,188,795,1530,2393,3384,407,1654,3029,
436,2067,3826,1617,3632,1679,3950,2253,684,3339,
2026,841,3880,2951,2150,1477,932,515,226,65,
32,127,350,701,1180,1787,2522,3385,280,1399,
2646,4021,1428,3059,722,2609,528,2671,846,3245,
1676,235,3018,1833,776,3943,3142,2469,1924,1507,
1218,1057,1024,1119,1342,1693,2172,2779,3514,281,
1272,2391,3638,917,2420,4051,1714,3601,1520,3663,
1838,141,2668,1227,4010,2825,1768,839,38,3461,
2916,2499,2210,2049,2016,2111,2334,2685,3164,3771,
410,1273,2264,3383,534,1909,3412,947,2706,497,
2512,559,2830,1133,3660,2219,906,3817,2760,1831,
1030,357,3908,3491,3202,3041,3008,3103,3326,3677,
60,667,1402,2265,3256,279,1526,2901,308,1939,
3698,1489,3504,1551,3822,2125,556,3211,1898,713,
3752,2823,2022,1349,804,387,98,4033,4000,4095,
222,573,1052,1659,2394,3257,152,1271,2518,3893,
1300,2931,594,2481,400,2543,718,3117,1548,107,
2890,1705,648,3815,3014,2341,1796,1379,1090,929,
896,991,1214,1565,2044,2651,3386,153,1144,2263,
3510,789,2292,3923,1586,3473,1392,3535,1710,13,
2540,1099,3882,2697,1640,711,4006,3333,2788,2371,
2082,1921,1888,1983,2206,2557,3036,3643,282,1145,
2136,3255,406,1781,3284,819,2578,369,2384,431,
2702,1005,3532,2091,778,3689,2632,1703,902,229,
3780,3363,3074,2913,2880,2975,3198,3549,4028,539,
1274,2137,3128,151,1398,2773,180,1811,3570,1361,
3376,1423,3694,1997,428,3083,1770,585,3624,2695,
1894,1221,676,259,4066,3905,3872,3967,94,445,
924,1531,2266,3129,24,1143,2390,3765,1172,2803,
466,2353,272,2415,590,2989,1420,4075,2762,1577,
520,3687,2886,2213,1668,1251,962,801,768,863,
1086,1437,1916,2523,3258,25,1016,2135,3382,661,
2164,3795,1458,3345,1264,3407,1582,3981,2412,971,
3754,2569,1512,583,3878,3205,2660,2243,1954,1793,
1760,1855,2078,2429,2908,3515,154,1017,2008,3127,
278,1653,3156,691,2450,241,2256,303,2574,877,
3404,1963,650,3561,2504,1575,774,101,3652,3235,
2946,2785,2752,2847,3070,3421,3900,411,1146,2009,
3000,23,1270,2645,52,1683,3442,1233,3248,1295,
3566,1869,300,2955,1642,457,3496,2567,1766,1093,
548,131,3938,3777,3744,3839,4062,317,796,1403,
2138,3001,3992,1015,2262,3637,1044,2675,338,2225,
144,2287,462,2861,1292,3947,2634,1449,392,3559,
2758,2085,1540,1123,834,673,640,735,958,1309,
1788,2395,3130,3993,888,2007,3254,533,2036,3667,
1330,3217,1136,3279,1454,3853,2284,843,3626,2441,
1384,455,3750,3077,2532,2115,1826,1665,1632,1727,
1950,2301,2780,3387,26,889,1880,2999,150,1525,
3028,563,2322,113,2128,175,2446,749,3276,1835,
522,3433,2376,1447,646,4069,3524,3107,2818,2657,
2624,2719,2942,3293,3772,283,1018,1881,2872,3991,
1142,2517,4020,1555,3314,1105,3120,1167,3438,1741,
172,2827,1514,329,3368,2439,1638,965,420,3,
3810,3649,3616,3711,3934,189,668,1275,2010,2873,
3864,887,2134,3509,916,2547,210,2097,16,2159,
334,2733,1164,3819,2506,1321,264,3431,2630,1957,
1412,995,706,545,512,607,830,1181,1660,2267,
3002,3865,760,1879,3126,405,1908,3539,1202,3089,
1008,3151,1326,3725,2156,715,3498,2313,1256,327,
3622,2949,2404,1987,1698,1537,1504,1599,1822,2173,
2652,3259,3994,761,1752,2871,22,1397,2900,435,
2194,4081,2000,47,2318,621,3148,1707,394,3305,
2248,1319,518,3941,3396,2979,2690,2529,2496,2591,
2814,3165,3644,155,890,1753,2744,3863,1014,2389,
3892,1427,3186,977,2992,1039,3310,1613,44,2699,
1386,201,3240,2311,1510,837,292,3971,3682,3521,
3488,3583,3806,61,540,1147,1882,2745,3736,759,
2006,3381,788,2419,82,1969,3984,2031,206,2605,
1036,3691,2378,1193,136,3303,2502,1829,1284,867,
578,417,384,479,702,1053,1532,2139,2874,3737,
632,1751,2998,277,1780,3411,1074,2961,880,3023,
1198,3597,2028,587,3370,2185,1128,199,3494,2821,
2276,1859,1570,1409,1376,1471,1694,2045,2524,3131,
3866,633,1624,2743,3990,1269,2772,307,2066,3953,
1872,4015,2190,493,3020,1579,266,3177,2120,1191,
390,3813,3268,2851,2562,2401,2368,2463,2686,3037,
3516,27,762,1625,2616,3735,886,2261,3764,1299,
3058,849,2864,911,3182,1485,4012,2571,1258,73,
3112,2183,1382,709,164,3843,3554,3393,3360,3455,
3678,4029,412,1019,1754,2617,3608,631,1878,3253,
660,2291,4050,1841,3856,1903,78,2477,908,3563,
2250,1065,8,3175,2374,1701,1156,739,450,289,
256,351,574,925,1404,2011,2746,3609,504,1623,
2870,149,1652,3283,946,2833,752,2895,1070,3469,
1900,459,3242,2057,1000,71,3366,2693,2148,1731,
1442,1281,1248,1343,1566,1917,2396,3003,3738,505,
1496,2615,3862,1141,2644,179,1938,3825,1744,3887,
2062,365,2892,1451,138,3049,1992,1063,262,3685,
3140,2723,2434,2273,2240,2335,2558,2909,3388,3995,
634,1497,2488,3607,758,2133,3636,1171,2930,721,
2736,783,3054,1357,3884,2443,1130,4041,2984,2055,
1254,581,36,3715,3426,3265,3232,3327,3550,3901,
284,891,1626,2489,3480,503,1750,3125,532,2163,
3922,1713,3728,1775,4046,2349,780,3435,2122,937,
3976,3047,2246,1573,1028,611,322,161,128,223,
446,797,1276,1883,2618,3481,376,1495,2742,21,
1524,3155,818,2705,624,2767,942,3341,1772,331,
3114,1929,872,4039,3238,2565,2020,1603,1314,1153,
1120,1215,1438,1789,2268,2875,3610,377,1368,2487,
3734,1013,2516,51,1810,3697,1616,3759,1934,237,
2764,1323,10,2921,1864,935,134,3557,3012,2595,
2306,2145,2112,2207,2430,2781,3260,3867,506,1369,
2360,3479,630,2005,3508,1043,2802,593,2608,655,
2926,1229,3756,2315,1002,3913,2856,1927,1126,453,
4004,3587,3298,3137,3104,3199,3422,3773,156,763,
1498,2361,3352,375,1622,2997,404,2035,3794,1585,
3600,1647,3918,2221,652,3307,1994,809,3848,2919,
2118,1445,900,483,194,33};
*/






float gaussian(float variance)
{
	// static becuase we don't want to have it initialized each time we go in
	float returnvalue=0;
	float k;
	
	k = sqrt(variance/2.0);
	
	// add 24 uniform RV to obtain a simulation of normality
    int x;
	for (x=0;x<24;x++)
		returnvalue += floatrandom();
	
	return k*(returnvalue-0.5*24);

}




//////////////////////////////////////////////////////////////////////
// block interleave
// L_TOTAL must = x^2,otherwise,who knows?
//////////////////////////////////////////////////////////////////////
void init_Block_interleave_table()
{
	INT i,j;
	INT temp;

	temp = (INT)sqrt(L_TOTAL);
	for (i=0;i<temp;i++)
		for (j=0;j<temp;j++)
			m_Inter_table[i*temp+j] = j*temp+i;

	
}

//////////////////////////////////////////////////////////////////////
// RSC endcoder
// mesg -- {0,1}
// parity -- {0,1}
// force==1,terminated --- for outer encoder
//////////////////////////////////////////////////////////////////////
void RSC_Encode(BYTE *mesg, BYTE *parity, unsigned int size, bool force)
{
	BYTE state,uk;
	unsigned x;
	
	state=0;
	for (x=0;x<size;x++)
	{
		// force the encoder to zero state at the end
		if (x>=size-M && force)
		{
			mesg[x] = TailBit[state];
		}
		
		// can't assume the bool type has an intrinsic value of 0 or 1
		// may differ from platform to platform
		uk = mesg[x] ? 1 : 0;
		
		// calculate output due to new mesg bit
		parity[x] = EnNextOut[uk][state];
		// calculate the new state
		state = NextState[uk][state];
	}
}


//////////////////////////////////////////////////////////////////////
// Turbo encoder
// msg -- {0,1}
// stream -- {0,1}
// puncture -- true to get 1/2 rate,NOT tested yet
//////////////////////////////////////////////////////////////////////
void encode(BYTE *msg, BYTE *stream, bool puncture)
{
	INT i;
	BYTE imsg[L_TOTAL];
	BYTE chkBuffer[2][L_TOTAL];
	// first encoder
	RSC_Encode(msg,chkBuffer[0],L_TOTAL,true);
	// interleave
	for (i=0;i<L_TOTAL;i++)
		imsg[i]=msg[m_Inter_table[i]];
	// second encoder
	RSC_Encode(imsg,chkBuffer[1],L_TOTAL,false);
	// punture
	for (i=0;i<L_TOTAL;i++)
	{
		if(puncture){
			stream[i*2]=msg[i];
			stream[i*2+1]=chkBuffer[i%2][i];
		}else{
			stream[i*3]=msg[i];
			stream[i*3+1]=chkBuffer[0][i];
			stream[i*3+2]=chkBuffer[1][i];
		}	
	}
}

//////////////////////////////////////////////////////////////////////
// LogMAP component decoder
//////////////////////////////////////////////////////////////////////
__global__ void logmap(float *msg, float *parity, float *L_a,float *L_all, bool index, bool decoder2)
{

    const char NextOut[2][NSTATE] = // check bit based on current and input bit
    {	-1,-1,1,1,1,1,-1,-1,
        1,1,-1,-1,-1,-1,1,1
    };
    // NextState[bk][current state]
    const BYTE NextState[2][NSTATE] = // next state based on current and input bit
    {	0,4,5,1,2,6,7,3,
        4,0,1,5,6,2,3,7
    };
    // LastOut[bk][current state]
    const char LastOut[2][NSTATE] =	// trellis last check bit
    {	-1,1,1,-1,-1,1,1,-1,
        1,-1,-1,1,1,-1,-1,1
    };
    // LastState[bk][current state]
    const BYTE LastState[2][NSTATE] =	// last state lead to current state by input bk
    {	0,3,4,7,1,2,5,6,
        1,2,5,6,0,3,4,7
    };

    //const unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    const unsigned int block = blockIdx.x;
    const unsigned int thread = threadIdx.x;

	UINT s1,s2;
	float gamma[8];
    float sum;

	INT k;

	// alloc memory,
	__shared__ float Alpha[L_BLOCK][8];
	__shared__ float Beta[8];
	__shared__ float sum0[8];
	__shared__ float sum1[8];

	float max_branch[L_BLOCK];
    
	//__shared__ float max_branch[L_BLOCK];
    //float L_e[L_BLOCK];

	// initialize Alpha & Beta
	if (block == 0 && thread != 0) {
			Alpha[0][thread]=-INIFINITY;
	}
	else {
			Alpha[0][thread]=0;
	}

    //if (index && block == BLOCK_NUM - 1 && thread != 0)
     //   Beta[L_BLOCK-1][thread] = -INIFINITY;
    //else
     //   Beta[L_BLOCK-1][thread] = 0;

	// forward recursion,compute Alpha 
	for (k=1;k<L_BLOCK;k++)
	{
        sum=0;

        for (s1=0;s1<NSTATE;s1++)
            gamma[s1]=-INIFINITY;
        gamma[LastState[0][thread]]=-msg[block*L_BLOCK + k-1]+parity[block*L_BLOCK + k-1]*LastOut[0][thread]
            -logf(1+expf(L_a[block*L_BLOCK + k-1]));
        gamma[LastState[1][thread]]=msg[block*L_BLOCK + k-1]+parity[block*L_BLOCK + k-1]*LastOut[1][thread]
            +L_a[block*L_BLOCK + k-1]-logf(1+expf(L_a[block*L_BLOCK + k-1]));

        for (s1=0; s1<NSTATE; s1++)
            sum += expf(gamma[s1]+Alpha[k-1][s1]);
        if (sum < MIN)
            Alpha[k][thread]=-INIFINITY;
        else
            Alpha[k][thread]=logf(sum);
        
        __syncthreads();

		// normalization,prevent overflow
       // if (thread == 0) {
        //    max_branch[k]=Alpha[k][0];
         //   for (s2=1;s2<NSTATE;s2++)
          //      if (Alpha[k][s2]>max_branch[k])
           //         max_branch[k]=Alpha[k][s2];
        //}
            max_branch[k]=Alpha[k][0];
            for (s2=1;s2<NSTATE;s2++)
                if (Alpha[k][s2]>max_branch[k])
                    max_branch[k]=Alpha[k][s2];

        __syncthreads();
        Alpha[k][thread]=Alpha[k][thread]-max_branch[k];
	}

	// backward recursion,compute Beta
    if (index && block == BLOCK_NUM - 1 && thread != 0)
        Beta[thread] = -INIFINITY;
    else
        Beta[thread] = 0;

		sum0[thread] = 0;
        sum1[thread] = 0;
        float gamma0 = -msg[block*L_BLOCK + L_BLOCK-1]+parity[block*L_BLOCK + L_BLOCK-1]*LastOut[0][thread] - 
            logf(1+expf(L_a[block*L_BLOCK + L_BLOCK-1]));
        float gamma1 = msg[block*L_BLOCK + L_BLOCK-1]+parity[block*L_BLOCK + L_BLOCK-1]*LastOut[1][thread] + 
            L_a[block*L_BLOCK + L_BLOCK-1]-logf(1+expf(L_a[block*L_BLOCK + L_BLOCK-1]));
        sum0[thread] = expf(gamma0+Alpha[L_BLOCK-1][LastState[0][thread]]+Beta[thread]);
        sum1[thread] = expf(gamma1+Alpha[L_BLOCK-1][LastState[1][thread]]+Beta[thread]);

        __syncthreads();

        if (thread == 0) {
            float SUM0=0, SUM1=0;

            for (unsigned int i = 0; i < NSTATE; i++) {
                SUM0 += sum0[i];
                SUM1 += sum1[i];
            }

            L_all[block*L_BLOCK + L_BLOCK-1]=logf(SUM1)-logf(SUM0);
            //L_e[block*L_BLOCK + k]=L_all[block*L_BLOCK + k]-2*msg[block*L_BLOCK + k]-L_a[block*L_BLOCK + k];
        }

	for (k=L_BLOCK-2;k>=0;k--)
	{
			for (s2=0;s2<NSTATE;s2++)	// initialize metric
				gamma[s2]=-INIFINITY;
			gamma[NextState[0][thread]]=-msg[block*L_BLOCK + k+1]+parity[block*L_BLOCK + k+1]*NextOut[0][thread]
				-logf(1+expf(L_a[block*L_BLOCK + k+1]));	// bit0 
			gamma[NextState[1][thread]]=msg[block*L_BLOCK + k+1]+parity[block*L_BLOCK + k+1]*NextOut[1][thread]
				+L_a[block*L_BLOCK + k+1]-logf(1+expf(L_a[block*L_BLOCK + k+1]));	// bit1 
			sum=0.0;
			for (s2=0;s2<NSTATE;s2++)
				sum+=expf(gamma[s2]+Beta[s2]);
			if (sum<MIN)
				Beta[thread]=-INIFINITY;
			else
				Beta[thread]=logf(sum);

			Beta[thread]=Beta[thread]-max_branch[k+1];

		sum0[thread] = 0;
        sum1[thread] = 0;
        float gamma0 = -msg[block*L_BLOCK + k]+parity[block*L_BLOCK + k]*LastOut[0][thread] - 
            logf(1+expf(L_a[block*L_BLOCK + k]));
        float gamma1 = msg[block*L_BLOCK + k]+parity[block*L_BLOCK + k]*LastOut[1][thread] + 
            L_a[block*L_BLOCK + k]-logf(1+expf(L_a[block*L_BLOCK + k]));
        sum0[thread] = expf(gamma0+Alpha[k][LastState[0][thread]]+Beta[thread]);
        sum1[thread] = expf(gamma1+Alpha[k][LastState[1][thread]]+Beta[thread]);

        __syncthreads();

        if (thread == 0) {
            float SUM0=0, SUM1=0;

            for (unsigned int i = 0; i < NSTATE; i++) {
                SUM0 += sum0[i];
                SUM1 += sum1[i];
            }

            L_all[block*L_BLOCK + k]=logf(SUM1)-logf(SUM0);
            //L_e[block*L_BLOCK + k]=L_all[block*L_BLOCK + k]-2*msg[block*L_BLOCK + k]-L_a[block*L_BLOCK + k];
        }
	}
/*
	// forward again,computer LLRs
	for (k=0;k<L_BLOCK;k++) {
		sum0[thread] = 0;
        sum1[thread] = 0;
        float gamma0 = -msg[block*L_BLOCK + k]+parity[block*L_BLOCK + k]*LastOut[0][thread] - 
            logf(1+expf(L_a[block*L_BLOCK + k]));
        float gamma1 = msg[block*L_BLOCK + k]+parity[block*L_BLOCK + k]*LastOut[1][thread] + 
            L_a[block*L_BLOCK + k]-logf(1+expf(L_a[block*L_BLOCK + k]));
        sum0[thread] = expf(gamma0+Alpha[k][LastState[0][thread]]+Beta[k][thread]);
        sum1[thread] = expf(gamma1+Alpha[k][LastState[1][thread]]+Beta[k][thread]);

        __syncthreads();

        if (thread == 0) {
            float SUM0=0, SUM1=0;

            for (unsigned int i = 0; i < NSTATE; i++) {
                SUM0 += sum0[i];
                SUM1 += sum1[i];
            }

            L_all[block*L_BLOCK + k]=logf(SUM1)-logf(SUM0);
            //L_e[block*L_BLOCK + k]=L_all[block*L_BLOCK + k]-2*msg[block*L_BLOCK + k]-L_a[block*L_BLOCK + k];
        }

	}
	*/

   // __syncthreads();

   // if (thread == 0) {
   //     if (decoder2)
   //         for (int i = 0; i<L_BLOCK; i++)
   //             L_a[m_Inter_table[block*L_BLOCK + i]]=L_e[i];
   //     else 
   //         for (int i = 0; i<L_BLOCK; i++)
   //             L_a[i]=L_e[m_Inter_table[block*L_BLOCK + i]]
   // }

}


__global__ void interLeave(float * src, float * des , unsigned int * interLeaveTable ){
    const int tid = blockIdx.x*blockDim.x + threadIdx.x;
    des[tid] = src[interLeaveTable[tid]];
}

__global__ void deInterLeave(float * src, float * des , unsigned int * interLeaveTable ){
    const int tid = blockIdx.x*blockDim.x + threadIdx.x;
    des[interLeaveTable[tid]] = src[tid];
}

__global__ void gammaAlpha(float * msg ,float * parity, float * L_a, float (*gamma)[8][8], BYTE (*lastState)[8],char (*lastOut)[8] ){
    const int tid = blockIdx.x*blockDim.x + threadIdx.x;

    unsigned int s0,s2;
    for (s0=0;s0<NSTATE;s0++) {
		for (s2=0;s2<NSTATE;s2++)
			gamma[tid][s0][s2]=-INIFINITY;
		gamma[tid][s0][lastState[0][s0]]=-msg[tid]+parity[tid]*lastOut[0][s0]-log(1+exp(L_a[tid]));
		gamma[tid][s0][lastState[1][s0]]=msg[tid]+parity[tid]*lastOut[1][s0]+L_a[tid]-log(1+exp(L_a[tid]));
		//gamma[tid][s0][lastState[0][s0]]=0.5;
		//gamma[tid][s0][lastState[1][s0]]=-0.5;
    }
}

__global__ void gammaBeta(float * msg ,float * parity, float * L_a, float (*gamma)[8][8], BYTE (*nextState)[8], char (*nextOut)[8]){
    const int tid = blockIdx.x*blockDim.x + threadIdx.x;

    unsigned int s0,s2;
    for (s0=0;s0<NSTATE;s0++) {
		for (s2=0;s2<NSTATE;s2++)
			gamma[tid][s0][s2]=-INIFINITY;
		gamma[tid][s0][nextState[0][s0]]=-msg[tid]+parity[tid]*nextOut[0][s0]-log(1+exp(L_a[tid]));
		gamma[tid][s0][nextState[1][s0]]=msg[tid]+parity[tid]*nextOut[1][s0]+L_a[tid]-log(1+exp(L_a[tid]));
		//gamma[tid][s0][nextState[0][s0]]=0.5;
		//gamma[tid][s0][nextState[1][s0]]=-0.5;
    }
}

__global__ void Alpha(float (*Alpha)[8], float (*gamma)[8][8], float *maxBranch) {
	const int tid = blockIdx.x*blockDim.x + threadIdx.x;

	UINT k, s1, s2;
	float sum;

	if (tid == 0) {
		Alpha[0][0] = 0.0;
		for (s1=1;s1<NSTATE;s1++)
			Alpha[0][s1]=-INIFINITY;
	}
	else {
		for (s1=0;s1<NSTATE;s1++)
			Alpha[tid*(L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM))][s1]=0;
	}

	//for (k=1; k<=L_TOTAL; k++) {
	for (k=tid*L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM)+1; k<(tid*L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM)+L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM)); k++) {
        for (s2=0;s2<NSTATE;s2++){
            sum = 0.0;
            for (s1=0;s1<NSTATE;s1++) {
                sum+=exp(gamma[k-1][s2][s1]+Alpha[k-1][s1]);
			}
            if (sum<MIN)
            //if (sum<=0.000000000000000000000000000001)
                Alpha[k][s2]=-INIFINITY;
            else
                Alpha[k][s2]=log(sum);
        }

		// normalization,prevent overflow
		maxBranch[k]=Alpha[k][0];
		for (s2=1;s2<NSTATE;s2++)
			if (Alpha[k][s2]>maxBranch[k])
				maxBranch[k]=Alpha[k][s2];

		for (s2=0;s2<NSTATE;s2++)
			Alpha[k][s2]=Alpha[k][s2]-maxBranch[k];
	}

}

__global__ void Beta(float (*Beta)[8], float (*gamma)[8][8], bool index, float* maxBranch) {
	const int tid = blockIdx.x*blockDim.x + threadIdx.x;

	UINT k, s1, s2;
	float sum;

	if (tid == (AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM-1)) {
		if (index){// true -- terminated,false -- open
        Beta[L_TOTAL][0]=0.0;
        for (s2=1;s2<NSTATE;s2++)
            Beta[L_TOTAL][s2]=-INIFINITY;
		}
		else 
			for (s2=0;s2<NSTATE;s2++)
				Beta[L_TOTAL][s2]=0;
	}
	else {
		for (s2=0; s2<NSTATE; s2++)
			Beta[(tid+1)*L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM)][s2]=0;
	}

    for (k=(tid+1)*L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM)-1;k>(tid*L_TOTAL/(AlphaBetaTHREAD_NUM*AlphaBetaBLOCK_NUM));k--) {
   // for (k=L_TOTAL-1;k>0;k--) {

        for (s1=0;s1<NSTATE;s1++) {
            sum = 0.0;
            for (s2=0;s2<NSTATE;s2++) 
                sum += exp(gamma[k][s1][s2] + Beta[k+1][s2]);
            if (sum<MIN)
            //if (sum<=0.000000000000000000000000000001)
                Beta[k][s1] = -INIFINITY;
            else 
                Beta[k][s1] = log(sum);
        }

		// normalization,prevent overflow
		for (s2=0;s2<NSTATE;s2++)
			Beta[k][s2]=Beta[k][s2]-maxBranch[k];
	}
}

void computeAlpha(float (*AlphaHost)[8], float (*gamma)[8][8], float *maxBranch) {
    // initialize Alpha & Beta
    AlphaHost[0][0]=0;
	UINT s1,k,s2;
	float sum;
    for (s1=1;s1<NSTATE;s1++)
        AlphaHost[0][s1]=-INIFINITY;

    for (k=1;k<=L_TOTAL;k++){

        for (s2=0;s2<NSTATE;s2++){
            sum = 0;
            for (s1=0;s1<NSTATE;s1++) {
                sum+=exp(gamma[k-1][s2][s1]+AlphaHost[k-1][s1]);
			}
            if (sum<MIN)
            //if (sum<=0.000000000000000000000000000001)
                AlphaHost[k][s2]=-INIFINITY;
            else
                AlphaHost[k][s2]=log(sum);
        }

		// normalization,prevent overflow
		maxBranch[k]=AlphaHost[k][0];
		for (s2=1;s2<NSTATE;s2++)
			if (AlphaHost[k][s2]>maxBranch[k])
				maxBranch[k]=AlphaHost[k][s2];

		for (s2=0;s2<NSTATE;s2++)
			AlphaHost[k][s2]=AlphaHost[k][s2]-maxBranch[k];
    }
}

void computeBeta(float (*BetaHost)[8], float (*gamma)[8][8], bool index, float * maxBranch){
    // initialize Beta
	UINT s1,k,s2;
	float sum;
    if (index){// true -- terminated,false -- open
        BetaHost[L_TOTAL][0]=0;
        for (s2=1;s2<NSTATE;s2++)
            BetaHost[L_TOTAL][s2]=-INIFINITY;
    }
    else 
        for (s2=0;s2<NSTATE;s2++)
            BetaHost[L_TOTAL][s2]=0;

    for (k=L_TOTAL-1;k>0;k--) {

        for (s1=0;s1<NSTATE;s1++) {
            sum = 0.0;
            for (s2=0;s2<NSTATE;s2++) 
                sum += exp(gamma[k][s1][s2] + BetaHost[k+1][s2]);
            if (sum<MIN)
            //if (sum<=0.000000000000000000000000000001)
                BetaHost[k][s1] = -INIFINITY;
            else 
                BetaHost[k][s1] = log(sum);
        }

		// normalization,prevent overflow
		for (s2=0;s2<NSTATE;s2++)
			BetaHost[k][s2]=BetaHost[k][s2]-maxBranch[k];
    }
}

__global__ void normalizationAlphaAndBeta(float (*Alpha)[8], float (*Beta)[8]) {
    unsigned int tid = threadIdx.x+1; 
    float max_branch;
    max_branch = Alpha[tid][0];
	UINT s2;
    for (s2=1;s2<NSTATE;s2++)
        if (Alpha[tid][s2]>max_branch)
            max_branch = Alpha[tid][s2];

    for (s2=0;s2<NSTATE;s2++) {
        Alpha[tid][s2] = Alpha[tid][s2] - max_branch;

        if (tid != L_TOTAL) 
            Beta[tid][s2] = Beta[tid][s2] - max_branch;
    }

}

__global__ void LLRS(float * msg, float * parity, float * L_a, float (*Alpha)[8], float (*Beta)[8], float * L_all,BYTE (*lastState)[8], char (*lastOut)[8]) {
    unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    UINT s2;
	float sum0 = 0.0, sum1 = 0.0;
    for (s2=0;s2<NSTATE;s2++) {
        //gamma[LastState[0][s2]]=-msg[tid]+parity[tid]*LastOut[0][s2]-log(1+exp(L_a[tid]));
        //gamma[LastState[1][s2]]=msg[tid]+parity[tid]*LastOut[1][s2]+L_a[tid]-log(1+exp(L_a[tid]));
        //sum0+=exp(gamma[LastState[0][s2]]+Alpha[tid][LastState[0][s2]]+Beta[tid+1][s2]);
        //sum1+=exp(gamma[LastState[1][s2]]+Alpha[tid][LastState[1][s2]]+Beta[tid+1][s2]);
        float gamma0=-msg[tid]+parity[tid]*lastOut[0][s2]-log(1+exp(L_a[tid]));
        float gamma1=msg[tid]+parity[tid]*lastOut[1][s2]+L_a[tid]-log(1+exp(L_a[tid]));
        sum0+=exp(gamma0+Alpha[tid][lastState[0][s2]]+Beta[tid+1][s2]);
        sum1+=exp(gamma1+Alpha[tid][lastState[1][s2]]+Beta[tid+1][s2]);
    }
    //L_all[tid]=log(sum1)-log(sum0);
    L_all[tid]=log(sum1)-log(sum0);
}

__global__ void extrinsicInformation(float * L_all, float * msg, float * L_a, float * L_e) {
    unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    L_e[tid] = L_all[tid] - 2*msg[tid] - L_a[tid];
}

__global__ void demultiplex(float * stream, float * msg, float * parity0, float * parity1) {
    unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    //if (puncture){// punctured rate=1/2
    //    msg[tid]=stream[2*tid];
    //    parity[tid%2][tid]=stream[tid*2+1];
    //}
    //else {// unpunctured rate=1/3
    //    msg[tid]=stream[3*tid];
    //    parity0[tid]=stream[3*tid+1];
    //    parity1[tid]=stream[3*tid+2];
    //}
        msg[tid]=stream[3*tid];
        parity0[tid]=stream[3*tid+1];
        parity1[tid]=stream[3*tid+2];
}

__global__ void initializeExtrinsicInformation(float * L_e) {
    unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    L_e[tid] = 0;
    
}

__global__ void exestimateInformationBits(float * L_all, BYTE * msghat, UINT * m_Inter_table) {
    unsigned int tid = blockIdx.x*blockDim.x + threadIdx.x;
    if(L_all[tid]>0)
        msghat[m_Inter_table[tid]]=1;
        //msghat[tid]=1;
    else
        msghat[m_Inter_table[tid]]=0;
        //msghat[tid]=0;
}

void countErrors(BYTE *m, BYTE * mhat, UINT * bitsError, UINT * frameError, UINT iter) {

	bool f_err = false;
	for (int i=0; i<(L_TOTAL-M);i++) {
		if (m[i] != mhat[i]) {
			bitsError[iter] = bitsError[iter]+1;
			f_err = true;
		}
	}

	if (f_err) 
		frameError[iter] = frameError[iter]+1;
}


int main(int argc, char* argv[])
{
    initRandom(seed);

	BYTE * m;
	BYTE * x;
	float * y;
	BYTE * mhat;

	int frame;
	UINT bits_all,bits_err[MAXITER],frame_err[MAXITER];
	float Ber,Fer;
	float Eb_No_dB,No;
	int i;

	m = new BYTE[L_TOTAL];
	x = new BYTE[L_ALL];
	y = new float[L_ALL];
	mhat = new BYTE[L_TOTAL];

	//init_Block_interleave_table();	// block interleave

    findCudaDevice(argc, (const char **)argv);

	float * yDevice;
	float * msgDevice;
	float * imsgDevice;
	BYTE * mhatDevice;
	float * parity0Device;
	float * parity1Device;
	UINT * tableDevice;
	float * L_eDevice;
	float * L_aDevice;
	float * L_allDevice;

    cudaMalloc((void **)&yDevice, L_ALL*sizeof(float));
    cudaMalloc((void **)&msgDevice, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&imsgDevice, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&mhatDevice, L_TOTAL*sizeof(BYTE));
    cudaMalloc((void **)&parity0Device, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&parity1Device, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&tableDevice, L_TOTAL*sizeof(unsigned int));
    cudaMalloc((void **)&L_eDevice, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&L_aDevice, L_TOTAL*sizeof(float));
    cudaMalloc((void **)&L_allDevice, L_TOTAL*sizeof(float));

    cudaMemcpy(tableDevice,m_Inter_table,sizeof(unsigned int)*L_TOTAL, cudaMemcpyHostToDevice);

	for (Eb_No_dB= 0.0;Eb_No_dB<1.0;Eb_No_dB+=1.1){
	//for (Eb_No_dB= -3.0;Eb_No_dB<5.0;Eb_No_dB+=0.1){
		No = 1/pow(10.0,Eb_No_dB/10.0);
		bits_all = 0;
		for (i =0; i<MAXITER;i++) {
			bits_err[i]=0;
			frame_err[i]=0;
		}

		for (frame = 0; frame<FRAME_NUM; frame++, bits_all += (L_TOTAL-M)) {

			// Generate random information bits
			for (i=0;i<L_TOTAL;i++)
				if (boolrandom())
					m[i]=1;
				else
					m[i]=0;
			// encoder
			encode(m,x,false);
			// add noise
			for (i=0;i<L_ALL;i++)
				if (x[i])
					y[i]=1.0+gaussian(No/2);
				else
					y[i]=-1.0+gaussian(No/2);

			cudaMemcpy(yDevice,y,sizeof(float)*L_ALL, cudaMemcpyHostToDevice);

			demultiplex<<<LEAVER_BLOCK,LEAVER_THREAD>>>(yDevice, msgDevice, parity0Device, parity1Device); 
			interLeave<<<LEAVER_BLOCK,LEAVER_THREAD>>>(msgDevice, imsgDevice, tableDevice);
			initializeExtrinsicInformation<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_eDevice);

			for (int iter = 0; iter<MAXITER; iter++) {
				
				deInterLeave<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_eDevice, L_aDevice, tableDevice);

                logmap<<<BLOCK_NUM, THREAD_NUM>>>(msgDevice, parity0Device, L_aDevice, L_allDevice, true, false);

				extrinsicInformation<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_allDevice, msgDevice, L_aDevice, L_eDevice);

				interLeave<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_eDevice, L_aDevice, tableDevice);

                logmap<<<BLOCK_NUM, THREAD_NUM>>>(imsgDevice, parity1Device, L_aDevice, L_allDevice, false, true);

				extrinsicInformation<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_allDevice, imsgDevice, L_aDevice, L_eDevice);

				exestimateInformationBits<<<LEAVER_BLOCK,LEAVER_THREAD>>>(L_allDevice, mhatDevice, tableDevice); 

				cudaMemcpy(mhat, mhatDevice, sizeof(BYTE)*L_TOTAL, cudaMemcpyDeviceToHost);
				countErrors(m, mhat, bits_err, frame_err, iter);

			}

		}

		printf("-------------------------\n");
		printf("Eb/No=%fdB:\n",Eb_No_dB);
		printf("-------------------------\n");
		//fprintf(fp,"-------------------------\n");
		//fprintf(fp,"Eb/No=%fdB:\n",Eb_No_dB);
		//fprintf(fp,"-------------------------\n");

		for (i=0;i<MAXITER;i++) {
			Ber=(float)bits_err[i]/(float)bits_all;
			Fer=(float)frame_err[i]/(float)FRAME_NUM;
			printf("Iteration:%d\n",i+1);
			printf("---Ber=%f\n---Fer=%f\n",Ber,Fer);
		}
	}

	delete m;
	delete x;
	delete y;
	delete mhat;

	cudaFree(yDevice);
	cudaFree(msgDevice);
	cudaFree(imsgDevice);
	cudaFree(mhatDevice);
	cudaFree(parity0Device);
	cudaFree(parity1Device);
	cudaFree(tableDevice);
	cudaFree(L_eDevice);
	cudaFree(L_aDevice);
	cudaFree(L_allDevice);

	return 0;
}
